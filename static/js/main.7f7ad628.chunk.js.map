{"version":3,"sources":["components/Credits/index.js","components/Lights/index.js","lib/index.js","components/WebcamImageManager.js","constants.js","store.js","components/LightGlobe/Headlights/EightSeriesHeadlights.js","components/LightGlobe/Headlights/ThreeSeriesHeadlights.js","lib/volumetric-spotlight.js","components/LightGlobe/Headlights/VolumetricSpotlight.js","components/LightGlobe/Headlights/HeadlightBeams.js","components/LightGlobe/Headlights/FillerLights.js","components/LightGlobe/Oceans.js","components/LightGlobe/LightGlobe.js","components/LoadingIndicator.js","components/Effects.js","components/CameraRig.js","components/Stars.js","index.js"],"names":["className","rel","href","target","intensity","position","userData","bloom","attach","args","color","fog","isIntervalActive","periodLength","intervalStart","intervalEnd","offset","t","Date","getTime","OFFSETS","Array","from","cities","length","map","Math","random","getLightState","i","lightLow","lightHigh","lightLaser","turnLightOn","corsProxy","WebcamImageManager","src","handleUpdateCubeMap","imgRef","useRef","useFrame","newSrc","floor","current","useEffect","onload","inputWidth","naturalWidth","inputHeight","naturalHeight","inputImageAspectRatio","outputWidth","outputHeight","outputImage","document","createElement","width","height","getContext","drawImage","CubeTexture","needsUpdate","alt","style","display","crossOrigin","ref","HEADLIGHT_BODY_COLOR","Color","TURN_SIGNAL_COLOR","BEAM_COLOR_LASER","BEAM_COLOR_STANDARD","EMISSIVE_COLOR_LASER","EMISSIVE_COLOR_STANDARD","EMISSIVE_COLOR_OFF","useStore","create","set","zoomTarget","zoomStartTime","zoomStartPosition","setZoomTarget","state","setZoomStartTime","setZoomStartPosition","zoomToMesh","e","stopPropagation","object","updateMatrixWorld","worldPos","Vector3","headlightPos","getWorldPosition","x","y","z","console","log","multiplyScalar","handleHoverMesh","getElementById","innerHTML","handleUnhoverMesh","EightSeriesHeadlights","locations","React","useState","nycCubeMap","setNycCubeMap","hkCubeMap","setHkCubeMap","shallow","nodes","useLoader","GLTFLoader","process","lowDetailNodes","refs","createRef","griddyThingRefs","griddyThingInsideRefs","griddyThingLowDetailRefs","topLightRefs","r","lookAt","rotateY","PI","onDarkSide","emissiveColor","material","emissive","children","meshObjects","name","envMap","blinkingOff","scale","key","visible","geometry","onClick","onPointerOver","onPointerOut","roughness","envMapIntensity","clearcoat","metalness","opacity","transmission","transparent","depthWrite","distances","side","BackSide","getBulbEmissive","ThreeSeriesHeadlights","VolumetricSpotLightMaterial","vertexShader","join","fragmentShader","THREE","uniforms","attenuation","type","value","anglePower","spotPosition","lightColor","extend","VolumetricSpotlight","MyVolumetricSpotlight","forwardRef","props","vs","scene","useThree","index","angle","geometryLength","openEnded","wide","applyMatrix4","makeTranslation","parameters","makeRotationX","clock","targetPos","rotateZ","lightLength","setRef","useCallback","el","uniforms-lightColor-value","uniforms-attenuation-value","uniforms-anglePower-value","HeadlightBeams","targetRefs","bloomRefs","beams","render","posScaleFactor","dummy","initInstancedMesh","instanced","lightGuide","forEach","location","updateMatrix","setMatrixAt","matrix","instanceMatrix","FillerLights","draco","instancedMeshVisor","instancedMeshLightGuideOn","instancedMeshLightGuideOff","instancedMeshLens","Oceans","radius","topo","useTextureLoader","ocean","Vector2","wrapS","RepeatWrapping","alphaMap","shininess","LightGlobe","group","valueOf","rotation","useMemo","reduce","acc","cur","localMaxCity","a","c","abs","lat","lng","population","find","concat","latlngToSphericalCoords","inclination","azimuth","sin","cos","sphericalCoordsToCartesian","RADIUS","filter","LoadingIndicator","useProgress","progress","errors","loadingText","round","center","xmlns","xmlnsXlink","viewBox","d","id","attributeName","begin","dur","to","repeatCount","dominantBaseline","textAnchor","dy","textLength","xlinkHref","EffectComposer","RenderPass","UnrealBloomPass","materials","darkMaterial","transparentDarkMaterial","darkenNonBloomed","obj","isMesh","uuid","restoreMaterial","Effects","gl","camera","size","renderScene","comp","renderToScreen","addPass","finalComposer","finalPass","ShaderPass","baseTexture","bloomTexture","renderTarget2","texture","needsSwap","final","setSize","traverse","CameraRig","elapsedTime","copy","zoomDurationScaledByDistance","distanceToZoom","distanceTo","ZOOM_DURATION","newCamPos","lerpVectors","updateProjectionMatrix","enableDamping","minDistance","maxDistance","enablePan","zoomSpeed","StarfieldMaterial","time","fade","ShaderMaterial","genStar","setFromSpherical","Spherical","acos","Stars","depth","count","saturation","factor","positions","colors","sizes","increment","push","toArray","setHSL","g","b","Float32Array","getElapsedTime","starfieldMaterial","attachObject","blending","AdditiveBlending","uniforms-fade-value","vertexColors","App","Credits","colorManagement","concurrent","onCreated","setClearColor","antialias","toneMapping","CineonToneMapping","Lights","fallback","rootElement","ReactDOM"],"mappings":"gPAEe,aACb,OACE,yBAAKA,UAAU,WACb,uBACEC,IAAI,sBACJC,KAAK,8DACLC,OAAO,UAHT,oBAOA,6BACA,uBACEF,IAAI,sBACJC,KAAK,8DACLC,OAAO,UAHT,wB,sBCXS,aACb,OACE,+BACE,kCAAcC,UAAW,KACzB,0BAAMC,SAAU,EAAE,KAAM,GAAI,GAAIC,SAAU,CAAEC,OAAO,IACjD,0CAAsBC,OAAO,WAAWC,KAAM,CAAC,EAAG,GAAI,MACtD,uCAAmBD,OAAO,WAAWE,MAAM,UAAUC,KAAK,KAE5D,sCACEP,UAAW,IACXC,SAAU,EAAE,EAAG,EAAG,GAClBK,MAAO,a,OCeR,SAASE,EAAkBC,EAAcC,EAAeC,EAAaC,GAC1E,IAAMC,IAAK,IAAIC,MAAOC,UAAYH,GAAWH,EAC7C,OAAOI,EAAIF,GAAeE,GAAKH,EAGjC,IAAMM,EAAUC,MAAMC,KAAKD,MAAME,EAAOC,SAASC,KAAI,kBAAsB,IAAhBC,KAAKC,SAAiB,OAE1E,SAASC,EAAeC,GAC7B,IAAMb,EAASI,EAAQS,GAKvB,MAAO,CACLC,SALelB,EAAiB,KAAY,EAAG,IAAWI,GAM1De,UALgBnB,EAAiB,KAAY,IAAW,IAAWI,GAMnEgB,WALiBpB,EAAiB,KAAY,IAAW,KAAYI,GAMrEiB,YALkBrB,EAAiB,IAAW,EAAG,IAAWI,IAAWJ,EAAiB,KAAU,EAAG,IAAKI,I,6CCnCxGkB,EAAY,gDAEX,SAASC,EAAT,GAA4D,IAA7BC,EAA4B,EAA5BA,IAAKC,EAAuB,EAAvBA,oBACnCC,EAASC,mBAyFf,OAvFAC,aAAS,WACP,IAAMC,EAAM,UAAMP,EAAN,YAAmBE,EAAnB,iBAA+BV,KAAKgB,OAAM,IAAIxB,MAAOC,UAAY,MACzEsB,IAAWH,EAAOK,QAAQP,MAAKE,EAAOK,QAAQP,IAAMK,MAG1DG,qBAAU,WACRN,EAAOK,QAAQE,OAAS,WACtB,IAAMC,EAAaR,EAAOK,QAAQI,aAC5BC,EAAcV,EAAOK,QAAQM,cAM7BC,EAAwBJ,EAAaE,EAIvCG,EAAcL,EACdM,EAAeJ,EACfE,EAL2B,EAM7BC,EAN6B,EAMfH,EACLE,EAPoB,IAQ7BE,EAAeN,EARc,GAW/B,IAAMO,EAAcC,SAASC,cAAc,UAqC3CF,EAAYG,MAAQL,EACpBE,EAAYI,OAASL,EAKXC,EAAYK,WAAW,MAC7BC,UAAUrB,EAAOK,QAAS,EAAG,GAQjC,IAAMlB,EAAM,IAAImC,cACd,CAACP,EAAaA,EAAaA,EAAaA,EAAaA,EAAaA,IAEpE5B,EAAIoC,aAAc,EAClBxB,EAAoBZ,MAErB,CAACY,IAIF,kBAAC,IAAD,KACE,yBAAKyB,IAAI,kBAAkBC,MAAO,CAAEC,QAAS,QAAUC,YAAY,YAAYC,IAAK5B,EAAQF,IAAG,UAAKF,EAAL,YAAkBE,MCjGhH,IACM+B,EAAuB,IAAIC,QAAM,SACjCC,EAAoB,IAAID,QAAM,UAG9BE,EAAmB,IAAIF,QAAM,UAC7BG,EAAsB,IAAIH,QAAM,UAChCI,EAAuB,IAAIJ,QAAM,UACjCK,EAA0B,IAAIL,QAAM,UACpCM,EAAqB,IAAIN,QAAM,G,QCR/BO,EAAWC,aAAO,SAAAC,GAAG,MAAK,CACrCC,WAAY,KACZC,cAAe,KACfC,kBAAmB,KACnBC,cAAe,SAACH,GAAD,OAAgBD,GAAI,SAAAK,GAAK,MAAK,CAAEJ,kBAC/CK,iBAAkB,SAACJ,GAAD,OAAmBF,GAAI,SAAAK,GAAK,MAAK,CAAEH,qBACrDK,qBAAsB,SAACJ,GAAD,OAAuBH,GAAI,SAAAK,GAAK,MAAK,CAAEF,yBAC7DK,WAAY,SAACC,GACXA,EAAEC,kBACFD,EAAEE,OAAOC,oBACT,IAAMC,EAAW,IAAIC,UACfC,EAAeN,EAAEE,OAAOK,iBAAiBH,GAC/C,OAAuB,IAAnBE,EAAaE,GAA8B,IAAnBF,EAAaG,GAA8B,IAAnBH,EAAaI,EAAgBC,QAAQC,IAAI,QACtFrB,GAAI,SAAAK,GAAK,MAAK,CACnBJ,WAAYc,EAAaO,eAAe,UAG5CC,gBAAiB,SAACd,GAChBA,EAAEC,kBACFD,EAAEE,OAAOC,oBACT,IAAMC,EAAW,IAAIC,UACfC,EAAeN,EAAEE,OAAOK,iBAAiBH,GAC/C,GAAuB,IAAnBE,EAAaE,GAA8B,IAAnBF,EAAaG,GAA8B,IAAnBH,EAAaI,EAAS,OAAOC,QAAQC,IAAI,QAC7F5C,SAAS+C,eAAe,gBAAgBC,UAAY,4BAEtDC,kBAAmB,SAACjB,GAClBA,EAAEC,kBACFjC,SAAS+C,eAAe,gBAAgBC,UAAY,QCRjD,SAASE,EAAT,GAAgD,IAAdC,EAAa,EAAbA,UAAa,EAChBC,IAAMC,SAAS,MADC,mBAC7CC,EAD6C,KACjCC,EADiC,OAElBH,IAAMC,SAAS,MAFG,mBAE7CG,EAF6C,KAElCC,EAFkC,OAGKpC,GAAS,SAAAO,GAAK,MAAI,CACzEA,EAAMG,WACNH,EAAMkB,gBACNlB,EAAMqB,qBACLS,KAPiD,mBAG7C3B,EAH6C,KAGjCe,EAHiC,KAGhBG,EAHgB,KAS5CU,EAAUC,YAChBC,IACAC,6CAFMH,MAKOI,EAAmBH,YAChCC,IACAC,4CAFMH,MAKFK,EAAO/E,iBAAOkE,EAAUhF,KAAI,kBAAM8F,0BAClCC,EAAkBjF,iBAAOkE,EAAUhF,KAAI,kBAAM8F,0BAC7CE,EAAwBlF,iBAAOkE,EAAUhF,KAAI,kBAAM8F,0BACnDG,EAA2BnF,iBAAOkE,EAAUhF,KAAI,kBAAM8F,0BACtDI,EAAepF,iBAAOkE,EAAUhF,KAAI,kBAAM8F,0BAEhD3E,qBAAU,WAAO,IAAD,gBACE0E,EAAK3E,SADP,IACd,2BAA8B,CAAC,IAApBiF,EAAmB,QAC5BA,EAAEjF,QAAQkF,OAAO,EAAE,EAAE,GAErBD,EAAEjF,QAAQmF,QAAS,EAAIpG,KAAKqG,GAAK,IAJrB,iCAOb,IAEHvF,aAAS,WAEP,IADA,IAAIkD,EAAW,IAAIC,UACV9D,EAAI,EAAGA,EAAI4E,EAAUjF,OAAQK,IAAK,CACvByF,EAAK3E,QAAQd,GAAGc,QACxBkD,iBAAiBH,GAC3B,IAAMsC,KAAgBtC,EAASI,EAAI,IAHM,EAILlE,EAAcC,GAA1CG,EAJiC,EAIjCA,WAAYC,EAJqB,EAIrBA,YACdgG,EAAgBjG,EAAawC,EAAuBC,EAC1D+C,EAAgB7E,QAAQd,GAAGc,QAAQuF,SAASC,WAAWH,GAAaC,EACpET,EAAgB7E,QAAQd,GAAGc,QAAQrC,SAAW,CAAEC,MAAOyH,GACvDP,EAAsB9E,QAAQd,GAAGc,QAAQuF,SAASC,WAAWH,GAAaC,EAC1ER,EAAsB9E,QAAQd,GAAGc,QAAQrC,SAAW,CAAEC,MAAOyH,GAC7DN,EAAyB/E,QAAQd,GAAGc,QAAQuF,SAASC,WAAWH,GAAaC,EAC7EP,EAAyB/E,QAAQd,GAAGc,QAAQrC,SAAW,CAAEC,MAAOyH,GAChEL,EAAahF,QAAQd,GAAGc,QAAQyF,SAAS,GAAGF,SAASC,SAAWlG,EAAcoC,EAAoB2D,EAAaC,EAAgBvD,EAC/HiD,EAAahF,QAAQd,GAAGc,QAAQyF,SAAS,GAAGF,SAASC,SAAWlG,EAAcoC,EAAoB2D,EAAaC,EAAgBvD,EAC/HiD,EAAahF,QAAQd,GAAGc,QAAQyF,SAAS,GAAG9H,SAAW,CAAEC,QAAO0B,GAAqB+F,GACrFL,EAAahF,QAAQd,GAAGc,QAAQyF,SAAS,GAAG9H,SAAW,CAAEC,QAAO0B,GAAqB+F,OAIzF,IAAMK,EAAc5B,EAAUhF,KAAI,WAA2DI,GAAO,IAA/DxB,EAA8D,EAA9DA,SAAUiI,EAAoD,EAApDA,KACvCC,GAD2F,EAA9CP,WAA8C,EAAlCQ,YAAkC,EAArBvG,YAC7D,CACb,gBAAiB2E,EACjB,cAAeA,EACf,YAAaE,EACb,QAAWA,EACX,MAASA,EACT,MAASA,IAEX,OACE,2BAAO2B,MAAO,CAAC,IAAM,IAAM,KAAQC,IAAKJ,EAAMjI,SAAUA,EAAU6D,IAAKoD,EAAK3E,QAAQd,IAClF,0BACE8G,SAAO,EACPC,SAAU3B,EAAK,MAAU2B,SACzBC,QAASxD,EACTyD,cAAe1C,EACf2C,aAAcxC,GAEd,0CACE/F,OAAO,WACPE,MAAO,SACPsI,UAAW,IACXT,OAAQA,EAAOD,GAAQC,EAAOD,GAAQ1B,EACtCqC,gBAAiB,IACjBC,UAAW,GACXC,UAAW,GACXC,QAAS,EACTC,aAAc,GACdC,aAAW,EACXC,YAAY,KAGhB,kBAAC,IAAD,CAAUC,UAAW,CAAC,EAAG,MACvB,0BAAMb,SAAO,EAACC,SAAU3B,EAAM,qBAAqB2B,UACjD,0CACEpI,OAAO,WACPE,MAAOyD,EACP6E,UAAW,GACXG,UAAW,MAGf,0BAAMR,SAAO,EAACC,SAAUvB,EAAe,qBAAqBuB,UAC1D,0CACEpI,OAAO,WACPE,MAAOyD,EACP6E,UAAW,GACXG,UAAW,OAIjB,kBAAC,IAAD,CAAUK,UAAW,CAAC,EAAG,IACvB,8BACE,0BAAMtF,IAAKsD,EAAgB7E,QAAQd,GAAI8G,SAAO,EAACC,SAAU3B,EAAM,gBAAgB2B,UAC7E,0CACEpI,OAAO,WACPE,MFxHa,SEyHbsI,UAAW,GACXG,UAAW,GACXC,QAAS,EACTE,aAAW,EACXD,aAAc,IACdE,YAAY,KAGhB,0BAAMrF,IAAKuD,EAAsB9E,QAAQd,GAAI8G,SAAO,EAACC,SAAU3B,EAAM,gBAAgB2B,UACnF,0CACEpI,OAAO,WACPE,MFpIa,SEqIbsI,UAAW,GACXG,UAAW,GACXC,QAAS,EACTE,aAAW,EACXD,aAAc,GACdE,YAAY,EACZE,KAAMC,eAIZ,0BAAMf,SAAO,EAACzE,IAAKwD,EAAyB/E,QAAQd,GAAI+G,SAAUvB,EAAe,gBAAgBuB,UAC/F,0CACEpI,OAAO,WACPE,MFlJe,SEmJfsI,UAAW,GACXG,UAAW,GACXI,YAAY,MAIlB,0BAAMZ,SAAO,EAACC,SAAUvB,EAAc,MAAUuB,UAC9C,0CACEpI,OAAO,WACPE,MAAO,SACPsI,UAAW,GACXG,UAAW,GACXhB,SAAU,YAGd,kBAAC,IAAD,CAAUjE,IAAKyD,EAAahF,QAAQd,GAAI2H,UAAW,CAAC,EAAG,MACrD,0BAAMb,SAAO,EAACC,SAAU3B,EAAM,aAAa2B,UACzC,0CACEpI,OAAO,WACPE,MAAO,SACPsI,UAAW,GACXG,UAAW,GACXC,QAAS,GACTG,YAAY,KAGhB,0BAAMZ,SAAO,EAACC,SAAUvB,EAAe,aAAauB,UAClD,0CACEpI,OAAO,WACPE,MAAO,SACPsI,UAAW,GACXG,UAAW,GACXI,YAAY,MAIhB,0BAAMZ,SAAO,EAACC,SAAU3B,EAAM,eAAe2B,UAC3C,0CACEpI,OAAO,WACPE,MFjMsB,OEkMtBsI,UAAW,GACXG,UAAW,UAKvB,OACE,+BACE,kBAAChH,EAAD,CAAoBC,IA3LX,qCA2LwBC,oBAAqBwE,IACtD,kBAAC1E,EAAD,CAAoBC,IA7LZ,4CA6LwBC,oBAAqB0E,IACpDsB,GCzMP,SAASsB,EAAiB3B,EAAY/F,GACpC,OAAIA,EAAoBoC,EACpB2D,EAAmB,SAChB,EAGF,SAAS4B,EAAT,GAAgD,IAAdnD,EAAa,EAAbA,UAAa,EACK9B,GAAS,SAAAO,GAAK,MAAI,CACzEA,EAAMG,WACNH,EAAMkB,gBACNlB,EAAMqB,qBACLS,KALiD,mBAC7C3B,EAD6C,KACjCe,EADiC,KAChBG,EADgB,KAO5CU,EAAUC,YAChBC,IACAC,6CAFMH,MAKOI,EAAmBH,YAChCC,IACAC,4CAFMH,MAMFK,EAAO/E,iBAAOkE,EAAUhF,KAAI,kBAAM8F,0BAExC3E,qBAAU,WAAO,IAAD,gBACE0E,EAAK3E,SADP,IACd,2BAA8B,CAAC,IAApBiF,EAAmB,QAC5BA,EAAEjF,QAAQkF,OAAO,EAAE,EAAE,GAErBD,EAAEjF,QAAQmF,QAAS,KAAOpG,KAAKqG,GAAK,IAJxB,iCAOb,IAEH,IAAMM,EAAc5B,EAAUhF,KAAI,WAA2DI,GAAO,IAA/DxB,EAA8D,EAA9DA,SAAUiI,EAAoD,EAApDA,KAAMN,EAA8C,EAA9CA,WAAyB/F,GAAqB,EAAlCuG,YAAkC,EAArBvG,aAC5E,OACE,0BAAMwG,MAAO,CAAC,KAAO,KAAO,MAASC,IAAKJ,EAAMjI,SAAUA,EAAU6D,IAAKoD,EAAK3E,QAAQd,IACpF,0BACE8G,SAAO,EACPC,SAAUvB,EAAc,MAAUuB,SAClCC,QAASxD,EACTyD,cAAe1C,EACf2C,aAAcxC,GAEd,0CACE/F,OAAO,WACPE,MAAO,SACPsI,UAAW,IACXE,UAAW,GACXC,UAAW,GACXC,QAAS,EACTE,aAAW,EACXC,YAAY,KAGhB,0BAAMZ,SAAO,EAACrI,SAAU,CAAEC,OAAO,GAAQqI,SAAU3B,EAAK,MAAU2B,UAChE,0CACEpI,OAAO,WACPwI,UAAW,GACXG,UAAW,GACXzI,MAAO,SACP4I,aAAW,EACXF,QAAS,GACTjB,SAAUwB,EAAgB3B,EAAY/F,MAG1C,kBAAC,IAAD,CAAUuH,UAAW,CAAC,EAAG,MACvB,0BAAMb,SAAO,EAACC,SAAU3B,EAAM,qBAAqB2B,UACjD,0CACEpI,OAAO,WACPE,MAAOyD,EACP6E,UAAW,GACXG,UAAW,MAGf,0BAAMR,SAAO,EAACC,SAAUvB,EAAe,qBAAqBuB,UAC1D,0CACEpI,OAAO,WACPE,MAAOyD,EACP6E,UAAW,GACXG,UAAW,OAIjB,0BAAM7I,SAAU,CAAEC,MAAOyH,GAAcW,SAAO,EAACC,SAAU3B,EAAM,gBAAgB2B,UAC7E,0CACEpI,OAAO,WACPE,MHpFiB,SGqFjBsI,UAAW,GACXG,UAAW,GACXhB,SAAUH,EAAa,SAAW,EAClCoB,QAAS,GACTE,aAAW,EACXC,YAAY,KAGhB,kBAAC,IAAD,CAAUC,UAAW,CAAC,EAAG,IACvB,0BAAMb,SAAO,EAACrI,SAAU,CAAEC,OAAO,GAAQqI,SAAU3B,EAAM,aAAa2B,UACpE,0CACEpI,OAAO,WACPE,MAAO,SACPsI,UAAW,GACXG,UAAW,MAGf,0BAAMR,SAAO,EAACrI,SAAU,CAAEC,OAAO,GAAQqI,SAAUvB,EAAe,aAAauB,UAC7E,0CACEpI,OAAO,WACPE,MAAO,SACPsI,UAAW,GACXG,UAAW,OAIjB,kBAAC,IAAD,CAAUK,UAAW,CAAC,EAAG,IACvB,0BAAMb,SAAO,EAACC,SAAU3B,EAAM,eAAe2B,UAC3C,0CACEpI,OAAO,WACPE,MAAO,SACPsI,UAAW,GACXG,UAAW,MAGf,0BAAMR,SAAO,EAACC,SAAUvB,EAAe,eAAeuB,UACpD,0CACEpI,OAAO,WACPE,MAAO,SACPsI,UAAW,GACXG,UAAW,OAIjB,kBAAC,IAAD,CAAUK,UAAW,CAAC,EAAG,MACvB,0BAAMb,SAAO,EAACC,SAAU3B,EAAM,eAAe2B,UAC3C,0CACEpI,OAAO,WACPE,MH3IiB,QG4IjBsI,UAAW,GACXG,UAAW,MAGf,0BAAMR,SAAO,EAACC,SAAUvB,EAAe,eAAeuB,UACpD,0CACEpI,OAAO,WACPE,MHnJiB,QGoJjBsI,UAAW,GACXG,UAAW,OAIjB,kBAAC,IAAD,CAAUK,UAAW,CAAC,EAAG,MACvB,0BAAMb,SAAO,EAACC,SAAU3B,EAAK,OAAW2B,UACtC,0CACEpI,OAAO,WACPE,MH9JsB,OG+JtBsI,UAAW,GACXG,UAAW,MAGf,0BAAMR,SAAO,EAACC,SAAUvB,EAAc,OAAWuB,UAC/C,0CACEpI,OAAO,WACPE,MHtKsB,OGuKtBsI,UAAW,GACXG,UAAW,OAIjB,kBAAC,IAAD,CAAUK,UAAW,CAAC,EAAG,IACvB,0BAAMb,SAAO,EAACC,SAAU3B,EAAM,cAAc2B,UAC1C,0CACEpI,OAAO,WACPwI,UAAW,GACXG,UAAW,GACXzI,MHlLsB,UGqL1B,0BAAMiI,SAAO,EAACC,SAAUvB,EAAe,cAAcuB,UACnD,0CACEpI,OAAO,WACPE,MHxLsB,OGyLtBsI,UAAW,GACXG,UAAW,WAMvB,OACE,+BACGd,GChMP,IAoFewB,EApFqB,WAElC,IAAIC,EAAe,CACjB,wBACA,+BAEA,eACA,uBACA,mDAEA,6DACA,yCAEA,qBACA,6EACA,KACAC,KAAK,MACHC,EAAiB,CACnB,2BACA,kCAEA,8BAEA,gCAEA,gCACA,+BAEA,eACA,mBAKA,mEACA,iDAKA,6DACA,+EACA,2CAQA,gDACA,KACAD,KAAK,MA6BP,OAzBe,IAAIE,iBAAqB,CACtCC,SAAU,CACRC,YAAa,CACXC,KAAM,IACNC,MAAO,GAETC,WAAY,CACVF,KAAM,IACNC,MAAO,KAETE,aAAc,CACZH,KAAM,KACNC,MAAO,IAAIJ,UAAc,EAAG,EAAG,IAEjCO,WAAY,CACVJ,KAAM,IACNC,MAAO,IAAIJ,QAAY,UAG3BH,aAAcA,EACdE,eAAgBA,EAChBP,KAAQQ,aACRX,aAAa,EACbC,YAAY,KC7EhBkB,YAAO,CACLC,wBAGK,IAAMC,EAAwBjE,IAAMkE,YAAW,SAA+BC,EAAO3G,GAC1F,IAAM4G,EAAKpE,IAAMnE,SAETwI,EAAUC,cAAVD,MAHuF,EAe3FF,EATFnK,aAN6F,MAMrF6D,EANqF,EAO7F/C,EAQEqJ,EARFrJ,OACAnB,EAOEwK,EAPFxK,SACAF,EAME0K,EANF1K,OACA8K,EAKEJ,EALFI,MAV6F,EAe3FJ,EAJFK,aAX6F,MAWrF,IAXqF,IAe3FL,EAHFM,sBAZ6F,MAY5E,EAZ4E,EAa7FC,EAEEP,EAFFO,UACAC,EACER,EADFQ,KAIFzI,qBAAU,WAGR,IAAMgG,EAAWkC,EAAGnI,QAAQiG,SAE5BA,EAAS0C,cACP,IAAIrB,WAAgBsB,gBAAgB,GAAI3C,EAAS4C,WAAW/H,OAAS,EAAG,IAE1EmF,EAAS0C,cAAa,IAAIrB,WAAgBwB,eAAe/J,KAAKqG,GAAK,MAgBlE,CAACgD,IAEJvI,aAAS,YAAe,EAAZkJ,MAMV,GAAIvL,GAAUA,EAAOwC,QAAS,CAC5B,IAAMgJ,EAAY,IAAI1B,UACtB9J,EAAOwC,QAAQkD,iBAAiB8F,GAChCb,EAAGnI,QAAQkF,OAAO8D,GAClBb,EAAGnI,QAAQiJ,QAAQlK,KAAKqG,GAAK,IAC7B+C,EAAGnI,QAAQmF,QAAQpG,KAAKqG,GAAK,IAC7B,IAAMC,KAAgB2D,EAAU7F,EAAI,IANR,EAOMlE,EAAcqJ,GAAxCjJ,EAPoB,EAOpBA,WAAYD,EAPQ,EAORA,UAEpB,GADA+I,EAAGnI,QAAQgG,QAAUX,GAChBA,EAAY,OAEjB,GADA8C,EAAGnI,QAAQuF,SAASgC,SAASM,WAAWH,MAAQrI,EAAasC,EAAmBC,EAC5E8G,EACFP,EAAGnI,QAAQuF,SAASgC,SAASI,WAAWD,MAAQrI,EAAa,IAAM,IACnE8I,EAAGnI,QAAQ8F,MAAM5D,IAAI7C,EAAa,EAAI,IAAK,EAAG,GAC9C8I,EAAGnI,QAAQuF,SAASgC,SAASC,YAAYE,MAAQ,QAC5C,CACL,IAAIwB,EAAc,EACd7J,IAAY6J,EAAc,GAC1B9J,IAAW8J,EAAc,GAC7Bf,EAAGnI,QAAQuF,SAASgC,SAASC,YAAYE,MAAQwB,EACjDf,EAAGnI,QAAQuF,SAASgC,SAASI,WAAWD,MAAQrI,EAAa,IAAM,IACnE8I,EAAGnI,QAAQ8F,MAAM5D,IAAI7C,EAAa,IAAM,EAAG,EAAG,QAKpD,IAAM8J,EAASpF,IAAMqF,aAAY,SAAgBC,GAC/ClB,EAAGnI,QAAUqJ,EAET9H,IACFA,EAAIvB,QAAUqJ,KAEf,CAAC9H,IAUJ,OACE,oCASE,0BAAMyE,SAAS,EAAOzE,IAAK4H,EAAQzL,SAAUA,GAC3C,sCAAkBI,KAAM,CAAC,IAAM,IAAM0K,EAAgB,GAAI,EAAGC,GAAY5K,OAAO,aAC/E,yCACEA,OAAO,WACPyL,4BAA2BvL,EAC3BwL,6BAA4B1K,EAC5B2K,4BAA2BjB,SCpH9B,SAASkB,EAAT,GAAyC,IAAd3F,EAAa,EAAbA,UAC1B4F,EAAa9J,iBAAOkE,EAAUhF,KAAI,kBAAM8F,0BACxC+E,EAAY/J,iBAAOkE,EAAUhF,KAAI,kBAAM8F,0BAEvCgF,EAAQ9F,EAAUhF,KAAI,WAGzBI,GAAQ,IAFTxB,EAEQ,EAFRA,SACAmM,EACQ,EADRA,OAEMC,EAAiBD,EAAS,IAAO,KACvC,OACE,2BAAO9D,IAAK7G,GACV,0BACEqC,IAAKmI,EAAW1J,QAAQd,GACxBxB,SAAU,CAAe,GAAdA,EAAS,GAAuB,GAAdA,EAAS,GAAuB,GAAdA,EAAS,MAE1D,0BACE6D,IAAKoI,EAAU3J,QAAQd,GACvBxB,SAAU,CAAe,EAAdA,EAAS,GAAsB,EAAdA,EAAS,GAAsB,EAAdA,EAAS,MAExD,kBAAC,EAAD,CACEA,SAAU,CAACA,EAAS,GAAKoM,EAAgBpM,EAAS,GAAKoM,EAAgBpM,EAAS,GAAKoM,GACrFxB,MAAOpJ,EACP1B,OAAQkM,EAAW1J,QAAQd,GAC3BuJ,WAAS,IAEVoB,GACC,kBAAC,EAAD,CACEnM,SAAU,CAAe,KAAdA,EAAS,GAAyB,KAAdA,EAAS,GAAyB,KAAdA,EAAS,IAC5DmB,OAAQ,IACR6J,MAAI,EACJJ,MAAOpJ,EACPsJ,eAAgB,EAChBhL,OAAQmM,EAAU3J,QAAQd,GAC1BuJ,WAAS,QAOnB,OACE,oCACGmB,G,YCzCDG,EAAQ,IAAIzC,WAElB,SAAS0C,EAAkBC,EAAWnG,EAAWoG,GAC/CpG,EAAUqG,SAAQ,SAACC,EAAUlL,GAAO,IAAD,IACzBxB,EAAa0M,EAAb1M,UACR,EAAAqM,EAAMrM,UAASwE,IAAf,oBAAsBxE,IACtB,IAAIoI,EAAQ,CAAC,KAAO,KAAO,MACR,OAAfoE,GAAwBE,EAAS/E,aACnCS,EAAQ,CAAC,EAAG,EAAG,IAEE,QAAfoE,GAAwBE,EAAS/E,aACnCS,EAAQ,CAAC,EAAG,EAAG,KAEjB,EAAAiE,EAAMjE,OAAM5D,IAAZ,oBAAmB4D,IACnBiE,EAAM7E,OAAO,EAAG,EAAG,GACnB6E,EAAM5E,QAAS,IAAMpG,KAAKqG,GAAK,GAC/B2E,EAAMM,eACNJ,EAAUjK,QAAQsK,YAAYpL,EAAG6K,EAAMQ,WAEzCN,EAAUjK,QAAQwK,eAAetJ,aAAc,EAG1C,SAASuJ,EAAT,GAAuC,IAAd3G,EAAa,EAAbA,UACtBQ,EAAUC,YAChBC,IACAC,4BACAiG,YAAMjG,gCAHAH,MAMFqG,EAAqB/K,mBACrBgL,EAA4BhL,mBAC5BiL,EAA6BjL,mBAC7BkL,EAAoBlL,mBAU1B,OAPAK,qBAAU,WACR+J,EAAkBW,EAAoB7G,GACtCkG,EAAkBY,EAA2B9G,EAAW,MACxDkG,EAAkBa,EAA4B/G,EAAW,OACzDkG,EAAkBc,EAAmBhH,KACpC,CAACA,IAGF,+BACE,mCAAevC,IAAKoJ,EAAoBhN,SAAU,CAAEC,OAAO,GAAQqI,SAAU3B,EAAK,MAAU2B,SAAUnI,KAAM,CAAC,KAAM,KAAMgG,EAAUjF,SACjI,0CACEhB,OAAO,WACPE,MAAO,SACPsI,UAAW,IACXG,UAAW,GACXC,QAAS,GACTE,aAAW,EACXC,YAAY,KAGhB,mCAAerF,IAAKsJ,EAA4B5E,SAAU3B,EAAM,eAAe2B,SAAUnI,KAAM,CAAC,KAAM,KAAMgG,EAAUjF,SACpH,0CACEhB,OAAO,WACPE,MAAO,SACPsI,UAAW,GACXG,UAAW,GACXC,QAAS,GACTE,aAAW,EACXC,YAAY,KAGhB,mCAAerF,IAAKqJ,EAA2BjN,SAAU,CAAEC,OAAO,GAAQqI,SAAU3B,EAAM,eAAe2B,SAAUnI,KAAM,CAAC,KAAM,KAAMgG,EAAUjF,SAC9I,0CACEhB,OAAO,WACPE,MAAO,SACPsI,UAAW,GACXG,UAAW,GACXhB,SAAU,SACViB,QAAS,GACTG,YAAY,EACZD,aAAW,KAGf,mCAAepF,IAAKuJ,EAAmB7E,SAAU3B,EAAK,KAAS2B,SAAUnI,KAAM,CAAC,KAAM,KAAMgG,EAAUjF,SACpG,0CACEhB,OAAO,WACPwI,UAAW,GACXG,UAAW,GACXzI,MAAO,SACP6I,YAAY,EACZH,QAAS,GACTE,aAAW,MCrFd,SAASoE,EAAT,GAA8B,IAAXC,EAAU,EAAVA,OAClBC,EAAOC,YAAiBzG,wCACxB0G,EAAQD,YAAiBzG,qCAK/B,OAJAwG,EAAK5M,OAAS,IAAI+M,UAAQ,GAAK,GAC/BH,EAAKI,MAAQC,iBACbH,EAAM9M,OAAS,IAAI+M,UAAQ,GAAK,GAChCD,EAAME,MAAQC,iBAEZ,8BACE,0CAAsBxN,KAAM,CAACkN,EAAS,GAZrB,GACC,MAYlB,uCACEjN,MAAO,SACPwN,SAAUN,EACVnM,IAAKqM,EACLK,UAAW,GACX7E,aAAW,EACXC,YAAY,KCNb,SAAS6E,EAAT,GAAkC,IAAX7M,EAAU,EAAVA,OACtB8M,EAAQ9L,mBAEdC,aAAS,WACP,IAAMoF,EXCelG,KAAKgB,OAAM,IAAIxB,MAAOoN,UAAY,KAHpC,YAMA,EAAI5M,KAAKqG,GAAKrG,KAAKqG,GWHtCsG,EAAM1L,QAAQ4L,SAASxI,EAAI6B,KAG7B,IAAMnB,EAAY+H,mBAAQ,kBACxBjN,EACGkN,QAAO,SAACC,EAAKC,GACV,IAAMC,EAAeF,EAAID,QAAO,SAACI,EAAGC,GAAJ,OAC7BpN,KAAKqN,IAAIF,EAAEG,IAAMF,EAAEE,KAdd,GAckCtN,KAAKqN,IAAIF,EAAEI,IAAMH,EAAEG,KAdrD,GAc0EH,EAAEI,WAAaL,EAAEK,WAC/FJ,EACAD,IACDF,GACH,OAAIC,IAAiBF,EAAIS,MAAK,SAAAL,GAAC,OAAIA,IAAMF,KAAsBF,EAAIU,OAAOR,GACnEF,IACN,IACJjN,KAAI,WAA6BI,GAAO,IAAjCmN,EAAgC,EAAhCA,IAAKC,EAA2B,EAA3BA,IAAK3G,EAAsB,EAAtBA,KAAMkE,EAAgB,EAAhBA,OAAgB,EXvBvC,SAAkCwC,EAAKC,GAG5C,MAAO,CAFavN,KAAKqG,IAAMiH,EAAM,EAAI,GAAKA,EAAM,GAAKtN,KAAKqN,IAAIC,IAAQ,IAC1D,EAAItN,KAAKqG,IAAMkH,GAAO,EAAIA,EAAM,IAAMvN,KAAKqN,IAAIE,IAAQ,KWsB7CI,CAAwBL,EAAKC,GADX,mBAGtC,MAAO,CACLzC,SACAnM,SXxCH,SAAqCsN,EAAQ2B,EAAaC,GAM/D,IAAMzJ,EAAI6H,EAASjM,KAAK8N,IAAIF,GAAe5N,KAAK+N,IAAIF,GAC9CvJ,EAAI2H,EAASjM,KAAK8N,IAAIF,GAAe5N,KAAK8N,IAAID,GAEpD,MAAO,EAAEzJ,EADC6H,EAASjM,KAAK+N,IAAIH,GACbtJ,GW4BQ0J,CAA2BlD,ETvB9B,ESuBgDmD,KAFxB,WAMpCrH,aAGN,CAAC/G,IA+BH,OACE,2BAAO2C,IAAKmK,GACV,kBAAC7H,EAAD,CAAuBC,UAAWA,EAAUmJ,QAAO,kBAA2B,gBAA3B,EAAGpD,YACtD,kBAAC5C,EAAD,CAAuBnD,UAAWA,EAAUmJ,QAAO,kBAA2B,gBAA3B,EAAGpD,YACtD,kBAACY,EAAD,CAAc3G,UAAWA,EAAUmJ,QAAO,qBAAGpD,YAC7C,kBAACJ,EAAD,CAAgB3F,UAAWA,IAC3B,kBAACiH,EAAD,CAAQC,OTnEQ,KUXf,SAASkC,IAAqB,IAAD,EACLC,cAArBC,EAD0B,EAC1BA,SAAUC,EADgB,EAChBA,OACdA,EAAOxO,QAAQyE,QAAQC,IAAI8J,GAC/B,IAAIC,EAAW,kBAAcvO,KAAKwO,MAAMH,GAAzB,KAGf,OADIC,EAAOxO,SAAQyO,EAAc,SAE/B,kBAAC,IAAD,CAAME,QAAM,GACV,yBAAKnQ,UAAU,WACb,yBAAKoQ,MAAM,6BAA6BC,WAAW,+BAA+BC,QAAQ,eACxF,2FACA,8BACE,0BAAMC,EAAE,sFAAsFC,GAAG,cAC/F,sCACEC,cAAc,YACdC,MAAM,KACNC,IAAI,MACJvG,KAAK,SACL9I,KAAK,YACLsP,GAAG,cACHC,YAAY,iBAIhB,0BAAM7Q,UAAU,WAAW8F,EAAE,MAAMC,EAAE,MAAM+K,iBAAiB,SAASC,WAAW,UAC5Ed,GAEJ,0BAAMe,GAAG,KAAKC,WAAW,QACvB,8BAAUjR,UAAU,cAAckR,UAAU,eAA5C,gE,sCCxBdzG,YAAO,CAAE0G,mBAAgBC,eAAYC,sBAErC,IAAMC,EAAY,GACZC,EAAe,IAAItH,oBAAwB,CAAEvJ,MAAO,UACpD8Q,EAA0B,IAAIvH,oBAAwB,CAAEvJ,MAAO,QAAS6I,YAAY,IACpFkI,EAAmB,SAAAC,GACnBA,EAAIC,SAAWD,EAAIpR,SAASC,QAC9B+Q,EAAUI,EAAIE,MAAQF,EAAIxJ,SAC1BwJ,EAAIxJ,SAAWwJ,EAAIxJ,SAASqB,WAAagI,EAAeC,IAGtDK,GAAkB,SAAAH,GAAG,OAAIJ,EAAUI,EAAIE,QAAWF,EAAIxJ,SAAWoJ,EAAUI,EAAIE,aAAeN,EAAUI,EAAIE,QAE3G,SAASE,KAAW,IAAD,EACY9G,cAA5B+G,EADgB,EAChBA,GAAIhH,EADY,EACZA,MAAOiH,EADK,EACLA,OAAQC,EADH,EACGA,KADH,EAODzD,mBAAQ,WAC7B,IAAM0D,EAAc,IAAId,IAAWrG,EAAOiH,GACpCG,EAAO,IAAIhB,IAAeY,GAChCI,EAAKC,gBAAiB,EACtBD,EAAKE,QAAQH,GACbC,EAAKE,QAAQ,IAAIhB,IAAgB,IAAIpH,UAAcgI,EAAKzO,MAAOyO,EAAKxO,QARhD,EAQwE,EAPvE,MASrB,IAAM6O,EAAgB,IAAInB,IAAeY,GACzCO,EAAcD,QAAQH,GACtB,IAAMK,EAAY,IAAIC,IACpB,IAAIvI,iBAAqB,CACvBC,SAAU,CAAEuI,YAAa,CAAEpI,MAAO,MAAQqI,aAAc,CAAErI,MAAO8H,EAAKQ,cAAcC,UACpF9I,aACE,wHACFE,eACE,oMAEJ,eAIF,OAFAuI,EAAUM,WAAY,EACtBP,EAAcD,QAAQE,GACf,CAACJ,EAAMG,KACb,CAACN,EAAQD,EAAIhH,EAAOkH,EAAKxO,OAAQwO,EAAKzO,MAzBnB,EACC,MALC,mBAOjBjD,EAPiB,KAOVuS,EAPU,KA8CxB,OAfAlQ,qBAAU,WACRrC,EAAMwS,QAAQd,EAAKzO,MAAOyO,EAAKxO,QAC/BqP,EAAMC,QAAQd,EAAKzO,MAAOyO,EAAKxO,UAC9B,CAAClD,EAAOuS,EAAOb,IAElBzP,aAAS,YAAwB,IAArBuI,EAAoB,EAApBA,MAAoB,EAAbiH,OAGjBjH,EAAMiI,SAASvB,GACflR,EAAMiM,SACNzB,EAAMiI,SAASnB,IAEfiB,EAAMtG,WACL,GAEI,KC1DF,SAASyG,KAAc,IAAD,EAC4BtO,GAAS,SAAAO,GAAK,MACnE,CAACA,EAAMJ,WAAYI,EAAMH,cAAeG,EAAMF,qBAAoBgC,KAFzC,mBACpBlC,EADoB,KACRC,EADQ,KACOC,EADP,KAGrBG,EAAmBR,GAAS,SAAAO,GAAK,OAAIA,EAAMC,oBAC3CC,EAAuBT,GAAS,SAAAO,GAAK,OAAIA,EAAME,wBAC/CH,EAAgBN,GAAS,SAAAO,GAAK,OAAIA,EAAMD,iBA4B9C,OA1BAzC,aAAS,YAAwB,IAArBwP,EAAoB,EAApBA,OAAQtG,EAAY,EAAZA,MAClB,GAAI5G,EAAY,CACd,IAAKC,EAGH,OAFAI,EAAiBuG,EAAMwH,kBACvB9N,GAAqB,IAAIO,WAAUwN,KAAKnB,EAAO3R,WAGjD,IAAI+S,EZHmB,IYIjBC,EAAiBrO,EAAkBsO,WAAWxO,GAIpD,GAHIuO,EAAiB,KAAKD,EAA+BG,KACrDF,EAAiB,IAAGD,EAA+BG,KACnDF,EAAiB,IAAGD,EAA+BG,OAClDH,GAAgC1H,EAAMwH,YAAcnO,EAAgBqO,EAIvE,OAHAnO,EAAc,MACdE,EAAiB,WACjBC,EAAqB,MAGvB,IAAMyJ,GAAKnD,EAAMwH,YAAcnO,GAAiBqO,EAC1CI,GAAY,IAAI7N,WAAU8N,YAAYzO,EAAmBF,EAAY+J,GAC3EmD,EAAO3R,SAAS8S,KAAKK,GACrBxB,EAAO0B,6BAMT,kBAAC,IAAD,CAAeC,eAAa,EAACC,YZ5BX,EY4BgCC,YAAa,GAAIC,WAAW,EAAOC,UAAW,K,4BCvC9FC,G,oDACJ,aAAe,wCACP,CACJ9J,SAAU,CAAE+J,KAAM,CAAE5J,MAAO,GAAO6J,KAAM,CAAE7J,MAAO,IACjDd,YAAY,EACZO,aAAa,sWASbE,eAAe,sW,UAdWmK,kBA8B1BC,GAAU,SAACxM,GACf,OAAO,IAAIjC,WAAU0O,iBAAiB,IAAIC,YAAU1M,EAAGlG,KAAK6S,KAAK,EAAoB,EAAhB7S,KAAKC,UAA+B,EAAhBD,KAAKC,SAAeD,KAAKqG,MAEvGyM,GAAQ5J,sBACnB,WAAuF1G,GAAS,IAAD,IAA5FyJ,cAA4F,MAAnF,IAAmF,MAA9E8G,aAA8E,MAAtE,GAAsE,MAAlEC,aAAkE,MAA1D,IAA0D,MAApDC,kBAAoD,MAAvC,EAAuC,MAApCC,cAAoC,MAA3B,EAA2B,MAAxBV,YAAwB,SACvFhM,EAAW3F,mBAD4E,EAE7DiM,mBAAQ,WAOtC,IANA,IAAMqG,EAAY,GACZC,EAAS,GACTC,EAAQ1T,MAAMC,KAAK,CAAEE,OAAQkT,IAAS,kBAAO,GAAM,GAAMhT,KAAKC,UAAYiT,KAC1ElU,EAAQ,IAAI0D,QACdwD,EAAI+F,EAAS8G,EACXO,EAAYP,EAAQC,EACjB7S,EAAI,EAAGA,EAAI6S,EAAO7S,IACzB+F,GAAKoN,EAAYtT,KAAKC,SACtBkT,EAAUI,KAAV,MAAAJ,EAAS,YAAST,GAAQxM,GAAGsN,YAC7BxU,EAAMyU,OAAOtT,EAAI6S,EAAOC,EAAY,GACpCG,EAAOG,KAAKvU,EAAMkH,EAAGlH,EAAM0U,EAAG1U,EAAM2U,GAEtC,MAAO,CAAC,IAAIC,aAAaT,GAAY,IAAIS,aAAaR,GAAS,IAAIQ,aAAaP,MAC/E,CAACL,EAAOD,EAAOG,EAAQjH,EAAQgH,IAhB2D,mBAEtFtU,EAFsF,KAE5EK,EAF4E,KAErEuR,EAFqE,KAiB7FzP,aAAS,SAAC0C,GAAD,OAAWgD,EAASvF,UAAYuF,EAASvF,QAAQuH,SAAS+J,KAAK5J,MAAQnF,EAAMwG,MAAM6J,qBAE5F,IAAMC,EAAoBhH,mBAAQ,kBAAM,IAAIwF,KAAqB,IAEjE,OACE,4BAAQ9P,IAAKA,GACX,oCAAgB1D,OAAO,YACrB,qCAAiBiV,aAAc,CAAC,aAAc,YAAahV,KAAM,CAACJ,EAAU,KAC5E,qCAAiBoV,aAAc,CAAC,aAAc,SAAUhV,KAAM,CAACC,EAAO,KACtE,qCAAiB+U,aAAc,CAAC,aAAc,QAAShV,KAAM,CAACwR,EAAM,MAEtE,+BACE/N,IAAKgE,EACL1C,OAAQgQ,EACRhV,OAAO,WACPkV,SAAUC,mBACVC,sBAAqB1B,EACrB5K,aAAW,EACXuM,cAAY,QCvDtB,SAASC,KACP,OACE,oCACE,kBAACC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEC,iBAAe,EACfC,YAAU,EACVC,UAAW,qBAAGnE,GAAYoE,cdxBZ,KcyBdpE,GAAI,CAAEqE,WAAW,EAAMC,YAAaC,sBAEpC,6BAAS9V,OAAO,MAAMC,KAAM,CAAC,UAAW,OACxC,kBAAC8V,EAAD,MAIM,kBAAC,WAAD,CAAUC,SAAU,kBAAC3G,EAAD,OAClB,kBAACzB,EAAD,CAAY7M,OAAQA,KAK5B,kBAAC0R,GAAD,MACA,kBAACuB,GAAD,CAAOI,OAAQ,IAAKD,WAAY,GAAKT,MAAI,IACzC,kBAAC,IAAD,MACA,kBAACpC,GAAD,SAOV,IAAM2E,GAAcnT,SAAS+C,eAAe,QAC5CqQ,IAASlK,OAAO,kBAACsJ,GAAD,MAASW,K","file":"static/js/main.7f7ad628.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default () => {\n  return (\n    <div className=\"credits\">\n      <a\n        rel=\"noopener noreferrer\"\n        href=\"https://bortolamigallery.com/artist/madeline-hollander/bio/\"\n        target=\"_blank\"\n      >\n        Sunrise / Sunset\n      </a>\n      <br />\n      <a\n        rel=\"noopener noreferrer\"\n        href=\"https://bortolamigallery.com/artist/madeline-hollander/bio/\"\n        target=\"_blank\"\n      >\n        Madeline Hollander\n      </a>\n    </div>\n  );\n};\n","import React from \"react\";\n\nexport default () => {\n  return (\n    <group>\n      <ambientLight intensity={0.4} />\n      <mesh position={[-200, -10, 0]} userData={{ bloom: true }}>\n        <sphereBufferGeometry attach=\"geometry\" args={[4, 32, 32]} />\n        <meshBasicMaterial attach=\"material\" color=\"#EEEE88\" fog={false} />\n      </mesh>\n      <directionalLight\n        intensity={1.5}\n        position={[-1, 0, 0]}\n        color={0xffffe4}\n      />\n    </group>\n  );\n};\n","import cities from \"./cities.json\"\nexport function sphericalCoordsToCartesian (radius, inclination, azimuth) {\n  /*\n   * Inclination is in the range [0, pi], from straight up (the zenith)\n   * Azimuth is in the range [0, 2pi], from the x axis\n   * See: https://en.wikipedia.org/wiki/Spherical_coordinate_system#Cartesian_coordinates\n   */\n  const x = radius * Math.sin(inclination) * Math.cos(azimuth);\n  const z = radius * Math.sin(inclination) * Math.sin(azimuth);\n  const y = radius * Math.cos(inclination);\n  return [-x, y, z];\n}\n\nexport function latlngToSphericalCoords (lat, lng) {\n  const inclination = Math.PI * (lat > 0 ? 90 - lat : 90 + Math.abs(lat)) / 180;\n  const azimuth = 2 * Math.PI * (lng >= 0 ? lng : 360 - Math.abs(lng)) / 360; \n  return [inclination, azimuth];\n}\n\nconst SECONDS_IN_DAY = 24 * 60 * 60;\n\nexport function calculateAngleForTime () {\n  const unixEraSeconds = Math.floor(new Date().valueOf() / 1000);\n  const secondsElapsedInDay = unixEraSeconds % SECONDS_IN_DAY;\n  const dayProgress = secondsElapsedInDay / SECONDS_IN_DAY;\n  return dayProgress * 2 * Math.PI + Math.PI;\n}\n\nexport function isIntervalActive (periodLength, intervalStart, intervalEnd, offset) {\n  const t = (new Date().getTime() + offset) % (periodLength)\n  return t < intervalEnd && t >= intervalStart;\n}\n\nconst OFFSETS = Array.from(Array(cities.length)).map(() => Math.random() * 120 * 1000)\n\nexport function getLightState (i) {\n  const offset = OFFSETS[i]\n  const lightLow = isIntervalActive(120 * 1000, 0, 40 * 1000, offset)\n  const lightHigh = isIntervalActive(120 * 1000, 40 * 1000, 70 * 1000, offset)\n  const lightLaser = isIntervalActive(120 * 1000, 70 * 1000, 120 * 1000, offset)\n  const turnLightOn = isIntervalActive(60 * 1000, 0, 20 * 1000, offset) && isIntervalActive(1 * 1500, 0, 750, offset)\n  return {\n    lightLow,\n    lightHigh,\n    lightLaser,\n    turnLightOn\n  }\n}\n","import React, { useEffect, useRef } from \"react\";\nimport { useFrame } from \"react-three-fiber\";\nimport { Html } from \"drei\";\nimport { CubeTexture } from \"three\";\n\nconst corsProxy = 'https://cors-anywhere.services.computerlab.io';\n\nexport function WebcamImageManager ({ src, handleUpdateCubeMap }) {\n  const imgRef = useRef();\n\n  useFrame(() => {\n    const newSrc = `${corsProxy}/${src}&rand=${Math.floor(new Date().getTime() / 1000)}`\n    if (newSrc !== imgRef.current.src) imgRef.current.src = newSrc\n  })\n\n  useEffect(() => {\n    imgRef.current.onload = () => {\n      const inputWidth = imgRef.current.naturalWidth;\n      const inputHeight = imgRef.current.naturalHeight;\n\n      // const dy = inputHeight / 3;\n      // const dx = Math.floor(inputWidth / 3);\n\n      // get the aspect ratio of the input image\n      const inputImageAspectRatio = inputWidth / inputHeight;\n      const outputImageAspectRatio = 1;\n\n      // if it's bigger than our target aspect ratio\n      let outputWidth = inputWidth;\n      let outputHeight = inputHeight;\n      if (inputImageAspectRatio > outputImageAspectRatio) {\n        outputWidth = inputHeight * outputImageAspectRatio;\n      } else if (inputImageAspectRatio < outputImageAspectRatio) {\n        outputHeight = inputWidth / outputImageAspectRatio;\n      }\n\n      const outputImage = document.createElement('canvas');\n\n      // let ctx\n      // const emptySmallImage = document.createElement('canvas');\n      // emptySmallImage.width = dx;\n      // emptySmallImage.height = dx;\n      // // create a canvas that will present the output image\n      // const px = document.createElement('canvas');\n      // px.width = dx;\n      // px.height = dx;\n      // ctx = px.getContext('2d')\n      // ctx.drawImage(imgRef.current, 2 * dx, 0, dx, dx, 0, 0, dx, dx);\n      // const nx = document.createElement('canvas');\n      // nx.width = dx;\n      // nx.height = dx;\n      // ctx = nx.getContext('2d')\n      // ctx.drawImage(imgRef.current, 0, 0, dx, dx, 0, 0, dx, dx);\n      // const pz = document.createElement('canvas');\n      // pz.width = dx;\n      // pz.height = dx;\n      // ctx = pz.getContext('2d')\n      // ctx.drawImage(imgRef.current, dx, 0, dx, dx, 0, 0, dx, dx);\n      // const py = document.createElement('canvas');\n      // py.width = dx;\n      // py.height = dx;\n      // ctx = py.getContext('2d')\n      // ctx.drawImage(imgRef.current, dx, 0, dx, dx, 0, 0, dx, dx);\n      // const ny = document.createElement('canvas');\n      // ny.width = dx;\n      // ny.height = dx;\n      // ctx = ny.getContext('2d')\n      // ctx.drawImage(imgRef.current, dx, 2 * dx, dx, dx, 0, 0, dx, dx);\n\n\n      // const emptyImage = document.createElement('canvas');\n\n      // set it to the same size as the image\n      outputImage.width = outputWidth;\n      outputImage.height = outputHeight;\n      // emptyImage.width = outputWidth;\n      // emptyImage.height = outputHeight;\n\n      // draw our image at position 0, 0 on the canvas\n      let ctx = outputImage.getContext('2d');\n      ctx.drawImage(imgRef.current, 0, 0);\n\n      // show both the image and the canvas\n\n      // const map = new CubeTexture(\n      //   [px, nx, emptySmallImage, emptySmallImage, pz, pz ]\n      // )\n\n      const map = new CubeTexture(\n        [outputImage, outputImage, outputImage, outputImage, outputImage, outputImage ]\n      )\n      map.needsUpdate = true;\n      handleUpdateCubeMap(map)\n    }\n  }, [handleUpdateCubeMap])\n\n\n  return (\n    <Html>\n      <img alt='nyc traffic cam' style={{ display: 'none' }} crossOrigin=\"anonymous\" ref={imgRef} src={`${corsProxy}/${src}`} />\n    </Html>\n  )\n}\n","import { Color } from 'three'\n// colors\nexport const BG_COLOR = ''\nexport const HEADLIGHT_BODY_COLOR = new Color(0x838b9f)\nexport const TURN_SIGNAL_COLOR = new Color(0xF18F17)\nexport const BODY_HIGHLIGHT_COLOR = 0x0a25ad\nexport const BODY_DARK_COLOR = 0x242529\nexport const BEAM_COLOR_LASER = new Color(0xEEEAFF)\nexport const BEAM_COLOR_STANDARD = new Color(0xEAEEF8)\nexport const EMISSIVE_COLOR_LASER = new Color(0xaaaaff)\nexport const EMISSIVE_COLOR_STANDARD = new Color(0xaaaacc)\nexport const EMISSIVE_COLOR_OFF = new Color(0x000000)\nexport const PLASTIC_COLOR = 0xddeeff\n\n// geometry\nexport const RADIUS = 3\n\n// other\nexport const DEFAULT_LAYER = 0\nexport const BLOOM_LAYER = 1\nexport const ZOOM_DURATION = 1.5\nexport const IS_LIVE = true\n","import create from 'zustand'\nimport { Vector3 } from \"three\"\n\nexport const useStore = create(set => ({\n  zoomTarget: null,\n  zoomStartTime: null,\n  zoomStartPosition: null,\n  setZoomTarget: (zoomTarget) => set(state => ({ zoomTarget })),\n  setZoomStartTime: (zoomStartTime) => set(state => ({ zoomStartTime })),\n  setZoomStartPosition: (zoomStartPosition) => set(state => ({ zoomStartPosition })),\n  zoomToMesh: (e) => {\n    e.stopPropagation();\n    e.object.updateMatrixWorld()\n    const worldPos = new Vector3()\n    const headlightPos = e.object.getWorldPosition(worldPos)\n    if (headlightPos.x === 0 && headlightPos.y === 0 && headlightPos.z === 0) return console.log('zero')\n    return set(state => ({\n      zoomTarget: headlightPos.multiplyScalar(1.1)\n    }))\n  },\n  handleHoverMesh: (e) => {\n    e.stopPropagation();\n    e.object.updateMatrixWorld()\n    const worldPos = new Vector3()\n    const headlightPos = e.object.getWorldPosition(worldPos)\n    if (headlightPos.x === 0 && headlightPos.y === 0 && headlightPos.z === 0) return console.log('zero')\n    document.getElementById('cursor-style').innerHTML = 'body { cursor: pointer }'\n  },\n  handleUnhoverMesh: (e) => {\n    e.stopPropagation();\n    document.getElementById('cursor-style').innerHTML = ''\n  },\n\n}))\n","import React, { useEffect, useRef, createRef } from 'react'\nimport { useLoader, useFrame } from \"react-three-fiber\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\nimport { Detailed } from \"drei\";\nimport { BackSide, Vector3 } from \"three\";\nimport shallow from \"zustand/shallow\"\nimport { WebcamImageManager } from \"../../WebcamImageManager\";\nimport {\n  PLASTIC_COLOR,\n  HEADLIGHT_BODY_COLOR,\n  BODY_HIGHLIGHT_COLOR,\n  TURN_SIGNAL_COLOR,\n  EMISSIVE_COLOR_LASER,\n  EMISSIVE_COLOR_STANDARD,\n  EMISSIVE_COLOR_OFF\n} from \"../../../constants\"\nimport { useStore } from '../../../store'\nimport { getLightState } from \"../../../lib\"\n\nconst hkSrc = 'https://tdcctv.data.one.gov.hk/K107F.JPG?';\nconst nycSrc = 'http://207.251.86.238/cctv884.jpg?';\n\nexport function EightSeriesHeadlights ({ locations }) {\n  const [nycCubeMap, setNycCubeMap] = React.useState(null)\n  const [hkCubeMap, setHkCubeMap] = React.useState(null)\n  const [zoomToMesh, handleHoverMesh, handleUnhoverMesh] = useStore(state => [\n    state.zoomToMesh,\n    state.handleHoverMesh,\n    state.handleUnhoverMesh\n  ], shallow)\n\n  const { nodes } = useLoader(\n    GLTFLoader,\n    process.env.PUBLIC_URL + \"/eight-series-high-lod.glb\",\n  );\n\n  const { nodes: lowDetailNodes } = useLoader(\n    GLTFLoader,\n    process.env.PUBLIC_URL + \"/eight-series-low-lod.glb\",\n  );\n\n  const refs = useRef(locations.map(() => createRef()))\n  const griddyThingRefs = useRef(locations.map(() => createRef()))\n  const griddyThingInsideRefs = useRef(locations.map(() => createRef()))\n  const griddyThingLowDetailRefs = useRef(locations.map(() => createRef()))\n  const topLightRefs = useRef(locations.map(() => createRef()))\n\n  useEffect(() => {\n    for (const r of refs.current) {\n      r.current.lookAt(0,0,0)\n      // r.current.rotateX(Math.PI / 2)\n      r.current.rotateY( 5 * Math.PI / 4)\n      // r.current.rotateZ(Math.PI / 4)\n    }\n  }, [])\n\n  useFrame(() => {\n    let worldPos = new Vector3()\n    for (let i = 0; i < locations.length; i++) {\n      const headlight = refs.current[i].current;\n      headlight.getWorldPosition(worldPos)\n      const onDarkSide = !!(worldPos.x > 0.1)\n      const { lightLaser, turnLightOn } = getLightState(i)\n      const emissiveColor = lightLaser ? EMISSIVE_COLOR_LASER : EMISSIVE_COLOR_STANDARD\n      griddyThingRefs.current[i].current.material.emissive = onDarkSide ? emissiveColor : false\n      griddyThingRefs.current[i].current.userData = { bloom: onDarkSide }\n      griddyThingInsideRefs.current[i].current.material.emissive = onDarkSide ? emissiveColor : false\n      griddyThingInsideRefs.current[i].current.userData = { bloom: onDarkSide }\n      griddyThingLowDetailRefs.current[i].current.material.emissive = onDarkSide ? emissiveColor : false\n      griddyThingLowDetailRefs.current[i].current.userData = { bloom: onDarkSide }\n      topLightRefs.current[i].current.children[0].material.emissive = turnLightOn ? TURN_SIGNAL_COLOR : onDarkSide ? emissiveColor : EMISSIVE_COLOR_OFF\n      topLightRefs.current[i].current.children[1].material.emissive = turnLightOn ? TURN_SIGNAL_COLOR : onDarkSide ? emissiveColor : EMISSIVE_COLOR_OFF\n      topLightRefs.current[i].current.children[0].userData = { bloom: turnLightOn ? true : onDarkSide }\n      topLightRefs.current[i].current.children[1].userData = { bloom: turnLightOn ? true : onDarkSide }\n    }\n  })\n\n  const meshObjects = locations.map(({ position, name, onDarkSide, blinkingOff, turnLightOn }, i) => {\n    const envMap = {\n      \"New York City\": nycCubeMap,\n      'Mexico City': nycCubeMap,\n      \"Hong Kong\": hkCubeMap,\n      \"Qingdao\": hkCubeMap,\n      \"Seoul\": hkCubeMap,\n      \"Dhaka\": hkCubeMap,\n    }\n    return (\n      <group scale={[0.02, 0.02, 0.02 ]} key={name} position={position} ref={refs.current[i]}>\n        <mesh\n          visible\n          geometry={nodes['visor'].geometry}\n          onClick={zoomToMesh}\n          onPointerOver={handleHoverMesh}\n          onPointerOut={handleUnhoverMesh}\n        >\n          <meshPhysicalMaterial\n            attach=\"material\"\n            color={0xeeeeee}\n            roughness={0.05}\n            envMap={envMap[name] ? envMap[name] : nycCubeMap}\n            envMapIntensity={1.8}\n            clearcoat={0.9}\n            metalness={0.9}\n            opacity={1}\n            transmission={0.6}\n            transparent\n            depthWrite={false}\n          />\n        </mesh>\n        <Detailed distances={[0, 3.8]}>\n          <mesh visible geometry={nodes['headlight-simpler'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={HEADLIGHT_BODY_COLOR}\n              roughness={0.4}\n              metalness={0.9}\n            />\n          </mesh>\n          <mesh visible geometry={lowDetailNodes['headlight-simpler'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={HEADLIGHT_BODY_COLOR}\n              roughness={0.2}\n              metalness={0.8}\n            />\n          </mesh>\n        </Detailed>\n        <Detailed distances={[0, 2]}>\n          <mesh>\n            <mesh ref={griddyThingRefs.current[i]} visible geometry={nodes['griddy-thing'].geometry}>\n              <meshPhysicalMaterial\n                attach=\"material\"\n                color={PLASTIC_COLOR}\n                roughness={0.2}\n                metalness={0.8}\n                opacity={1}\n                transparent\n                transmission={0.94}\n                depthWrite={false}\n              />\n            </mesh>\n            <mesh ref={griddyThingInsideRefs.current[i]} visible geometry={nodes['griddy-thing'].geometry}>\n              <meshPhysicalMaterial\n                attach=\"material\"\n                color={PLASTIC_COLOR}\n                roughness={0.2}\n                metalness={0.8}\n                opacity={1}\n                transparent\n                transmission={0.4}\n                depthWrite={false}\n                side={BackSide}\n              />\n            </mesh>\n          </mesh>\n          <mesh visible ref={griddyThingLowDetailRefs.current[i]} geometry={lowDetailNodes['griddy-thing'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={PLASTIC_COLOR}\n              roughness={0.2}\n              metalness={0.8}\n              depthWrite={false}\n            />\n          </mesh>\n        </Detailed>\n        <mesh visible geometry={lowDetailNodes['bulbs'].geometry}>\n          <meshStandardMaterial\n            attach=\"material\"\n            color={0xaaaaff}\n            roughness={0.3}\n            metalness={0.5}\n            emissive={0xffffff}\n          />\n        </mesh>\n        <Detailed ref={topLightRefs.current[i]} distances={[0, 2.5]}>\n          <mesh visible geometry={nodes['top-light'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={0xddeeff}\n              roughness={0.1}\n              metalness={0.8}\n              opacity={0.7}\n              depthWrite={false}\n            />\n          </mesh>\n          <mesh visible geometry={lowDetailNodes['top-light'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={0xddeeff}\n              roughness={0.1}\n              metalness={0.8}\n              depthWrite={false}\n            />\n          </mesh>\n        </Detailed>\n          <mesh visible geometry={nodes['inner-thing'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={BODY_HIGHLIGHT_COLOR}\n              roughness={0.6}\n              metalness={0.5}\n            />\n          </mesh>\n      </group>\n    )})\n  return (\n    <group>\n      <WebcamImageManager src={nycSrc} handleUpdateCubeMap={setNycCubeMap} />\n      <WebcamImageManager src={hkSrc} handleUpdateCubeMap={setHkCubeMap} />\n      {meshObjects}\n    </group>\n  );\n}\n","import React, { useEffect, useRef, createRef } from 'react'\nimport { useLoader } from \"react-three-fiber\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\nimport { Detailed } from \"drei\";\nimport shallow from \"zustand/shallow\"\nimport { PLASTIC_COLOR, TURN_SIGNAL_COLOR, HEADLIGHT_BODY_COLOR, BODY_HIGHLIGHT_COLOR, BODY_DARK_COLOR } from \"../../../constants\"\nimport { useStore } from \"../../../store\"\n\nfunction getBulbEmissive (onDarkSide, turnLightOn) {\n  if (turnLightOn) return TURN_SIGNAL_COLOR\n  if (onDarkSide) return 0xaaaaff\n  return 0x000000\n}\n\nexport function ThreeSeriesHeadlights ({ locations }) {\n  const [zoomToMesh, handleHoverMesh, handleUnhoverMesh] = useStore(state => [\n    state.zoomToMesh,\n    state.handleHoverMesh,\n    state.handleUnhoverMesh\n  ], shallow)\n\n  const { nodes } = useLoader(\n    GLTFLoader,\n    process.env.PUBLIC_URL + \"/three-series-high-lod.glb\",\n  );\n\n  const { nodes: lowDetailNodes } = useLoader(\n    GLTFLoader,\n    process.env.PUBLIC_URL + \"/three-series-low-lod.glb\",\n  );\n\n\n  const refs = useRef(locations.map(() => createRef()))\n\n  useEffect(() => {\n    for (const r of refs.current) {\n      r.current.lookAt(0,0,0)\n      // r.current.rotateX(Math.PI / 2)\n      r.current.rotateY( 5.65 * Math.PI / 4)\n      // r.current.rotateZ(Math.PI / 4)\n    }\n  }, [])\n\n  const meshObjects = locations.map(({ position, name, onDarkSide, blinkingOff, turnLightOn }, i) => {\n    return (\n      <mesh scale={[0.018, 0.018, 0.018 ]} key={name} position={position} ref={refs.current[i]}>\n        <mesh\n          visible\n          geometry={lowDetailNodes['visor'].geometry}\n          onClick={zoomToMesh}\n          onPointerOver={handleHoverMesh}\n          onPointerOut={handleUnhoverMesh}\n        >\n          <meshPhysicalMaterial\n            attach=\"material\"\n            color={0xeeeeee}\n            roughness={0.05}\n            clearcoat={0.9}\n            metalness={0.9}\n            opacity={1}\n            transparent\n            depthWrite={false}\n          />\n        </mesh>\n        <mesh visible userData={{ bloom: true }} geometry={nodes['bulbs'].geometry}>\n          <meshStandardMaterial\n            attach=\"material\"\n            roughness={0.1}\n            metalness={0.8}\n            color={0xaaaaff}\n            transparent\n            opacity={0.6}\n            emissive={getBulbEmissive(onDarkSide, turnLightOn)}\n          />\n        </mesh>\n        <Detailed distances={[0, 3.5]}>\n          <mesh visible geometry={nodes['headlight-simpler'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={HEADLIGHT_BODY_COLOR}\n              roughness={0.3}\n              metalness={0.7}\n            />\n          </mesh>\n          <mesh visible geometry={lowDetailNodes['headlight-simpler'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={HEADLIGHT_BODY_COLOR}\n              roughness={0.3}\n              metalness={0.7}\n            />\n          </mesh>\n        </Detailed>\n        <mesh userData={{ bloom: onDarkSide }} visible geometry={nodes['griddy-thing'].geometry}>\n          <meshStandardMaterial\n            attach=\"material\"\n            color={PLASTIC_COLOR}\n            roughness={0.2}\n            metalness={0.8}\n            emissive={onDarkSide ? 0xaaaaff : 0x000000}\n            opacity={0.6}\n            transparent\n            depthWrite={false}\n          />\n        </mesh>\n        <Detailed distances={[0, 2]}>\n          <mesh visible userData={{ bloom: true }} geometry={nodes['top-light'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={0xeeffff}\n              roughness={0.1}\n              metalness={0.8}\n            />\n          </mesh>\n          <mesh visible userData={{ bloom: true }} geometry={lowDetailNodes['top-light'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={0xeeffff}\n              roughness={0.1}\n              metalness={0.8}\n            />\n          </mesh>\n        </Detailed>\n        <Detailed distances={[0, 2]}>\n          <mesh visible geometry={nodes['top-light-2'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={0xddddff}\n              roughness={0.1}\n              metalness={0.8}\n            />\n          </mesh>\n          <mesh visible geometry={lowDetailNodes['top-light-2'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={0xddddff}\n              roughness={0.1}\n              metalness={0.8}\n            />\n          </mesh>\n        </Detailed>\n        <Detailed distances={[0, 3.8]}>\n          <mesh visible geometry={nodes['outer-liner'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={BODY_DARK_COLOR}\n              roughness={0.1}\n              metalness={0.8}\n            />\n          </mesh>\n          <mesh visible geometry={lowDetailNodes['outer-liner'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={BODY_DARK_COLOR}\n              roughness={0.1}\n              metalness={0.8}\n            />\n          </mesh>\n        </Detailed>\n        <Detailed distances={[0, 3.7]}>\n          <mesh visible geometry={nodes['hanger'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={BODY_HIGHLIGHT_COLOR}\n              roughness={0.1}\n              metalness={0.8}\n            />\n          </mesh>\n          <mesh visible geometry={lowDetailNodes['hanger'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={BODY_HIGHLIGHT_COLOR}\n              roughness={0.1}\n              metalness={0.8}\n            />\n          </mesh>\n        </Detailed>\n        <Detailed distances={[0, 2]}>\n          <mesh visible geometry={nodes['inner-body'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              roughness={0.1}\n              metalness={0.8}\n              color={BODY_HIGHLIGHT_COLOR}\n            />\n          </mesh>\n          <mesh visible geometry={lowDetailNodes['inner-body'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={BODY_HIGHLIGHT_COLOR}\n              roughness={0.1}\n              metalness={0.8}\n            />\n          </mesh>\n        </Detailed>\n      </mesh>\n    )})\n  return (\n    <group>\n      {meshObjects}\n    </group>\n  );\n}\n","// adapted from https://github.com/jeromeetienne/threex.volumetricspotlight\nimport * as THREE from \"three\";\n\n/**\n * from http://stemkoski.blogspot.fr/2013/07/shaders-in-threejs-glow-and-halo.html\n * @return {[type]} [description]\n */\nconst VolumetricSpotLightMaterial = function() {\n  //\n  var vertexShader = [\n    \"varying vec3 vNormal;\",\n    \"varying vec3 vWorldPosition;\",\n\n    \"void main(){\",\n    \"// compute intensity\",\n    \"vNormal\t\t= normalize( normalMatrix * normal );\",\n\n    \"vec4 worldPosition\t= modelMatrix * vec4( position, 1.0 );\",\n    \"vWorldPosition\t\t= worldPosition.xyz;\",\n\n    \"// set gl_Position\",\n    \"gl_Position\t= projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n    \"}\"\n  ].join(\"\\n\");\n  var fragmentShader = [\n    \"varying vec3\t\tvNormal;\",\n    \"varying vec3\t\tvWorldPosition;\",\n\n    \"uniform vec3\t\tlightColor;\",\n\n    \"uniform vec3\t\tspotPosition;\",\n\n    \"uniform float\t\tattenuation;\",\n    \"uniform float\t\tanglePower;\",\n\n    \"void main(){\",\n    \"float intensity;\",\n\n    //////////////////////////////////////////////////////////\n    // distance attenuation\t\t\t\t\t//\n    //////////////////////////////////////////////////////////\n    \"intensity\t= distance(vWorldPosition, spotPosition)/attenuation;\",\n    \"intensity\t= 1.0 - clamp(intensity, 0.0, 1.0);\",\n\n    //////////////////////////////////////////////////////////\n    // intensity on angle\t\t\t\t\t//\n    //////////////////////////////////////////////////////////\n    \"vec3 normal\t= vec3(vNormal.x, vNormal.y, abs(vNormal.z));\",\n    \"float angleIntensity\t= pow( dot(normal, vec3(0.0, 0.0, 1.0)), anglePower );\",\n    \"intensity\t= intensity * angleIntensity;\",\n    // 'gl_FragColor\t= vec4( lightColor, intensity );',\n\n    //////////////////////////////////////////////////////////\n    // final color\t\t\t\t\t\t//\n    //////////////////////////////////////////////////////////\n\n    // set the final color\n    \"gl_FragColor\t= vec4( lightColor, intensity);\",\n    \"}\"\n  ].join(\"\\n\");\n\n  // create custom material from the shader code above\n  //   that is within specially labeled script tags\n  var material = new THREE.ShaderMaterial({\n    uniforms: {\n      attenuation: {\n        type: \"f\",\n        value: 5.0\n      },\n      anglePower: {\n        type: \"f\",\n        value: 1.2\n      },\n      spotPosition: {\n        type: \"v3\",\n        value: new THREE.Vector3(0, 0, 0)\n      },\n      lightColor: {\n        type: \"c\",\n        value: new THREE.Color(\"cyan\")\n      }\n    },\n    vertexShader: vertexShader,\n    fragmentShader: fragmentShader,\n    side\t\t: THREE.DoubleSide,\n    transparent: true,\n    depthWrite: false\n  });\n  return material;\n};\n\nexport default VolumetricSpotLightMaterial;\n","import React, { useEffect } from \"react\";\n\n// from https://github.com/jeromeetienne/threex.volumetricspotlight\nimport { useThree, useFrame, extend } from \"react-three-fiber\";\nimport VolumetricSpotlight from \"../../../lib/volumetric-spotlight\";\nimport { BEAM_COLOR_LASER, BEAM_COLOR_STANDARD } from \"../../../constants\"\nimport * as THREE from \"three\";\nimport { getLightState } from \"../../../lib\"\n\nextend({\n  VolumetricSpotlight\n});\n\nexport const MyVolumetricSpotlight = React.forwardRef(function MyVolumetricSpotlight(props, ref) {\n  const vs = React.useRef();\n\n  const { scene } = useThree();\n\n  const {\n    color = BEAM_COLOR_STANDARD,\n    length,\n    position,\n    target,\n    index,\n    angle = 1.2,\n    geometryLength = 8,\n    openEnded,\n    wide\n  } = props;\n\n  // INIT\n  useEffect(() => {\n    // scene.add(spotlight.current.target);\n\n    const geometry = vs.current.geometry;\n\n    geometry.applyMatrix4(\n      new THREE.Matrix4().makeTranslation(0, -geometry.parameters.height / 2, 0)\n    );\n    geometry.applyMatrix4(new THREE.Matrix4().makeRotationX(-Math.PI / 2));\n\n    // vs.current.material.uniforms.spotPosition.value = vs.current.position;\n\n    // spotlight.current.position.copy(vs.current.position);\n    // spotlight.current.position.copy(vs.current.position);\n    // // @todo fix this\n    // vs.current.material.uniforms.lightColor.value = spotlight.current.color;\n\n\n    // if (target && target.current) {\n    //   const targetPos = new THREE.Vector3();\n    //   target.current.getWorldPosition(targetPos) ;\n    //   vs.current.lookAt(targetPos);\n    //   spotlight.current.target.position.copy(targetPos);\n    // }\n  }, [scene]);\n\n  useFrame(({ clock }) => {\n    // spotlight.current.position.copy(vs.current.position);\n    // @todo fix this\n    // vs.current.material.uniforms.lightColor.value = spotlight.current.color;\n\n\n    if (target && target.current) {\n      const targetPos = new THREE.Vector3()\n      target.current.getWorldPosition(targetPos)\n      vs.current.lookAt(targetPos)\n      vs.current.rotateZ(Math.PI / 12)\n      vs.current.rotateY(Math.PI / 12)\n      const onDarkSide = !!(targetPos.x > 0.1)\n      const { lightLaser, lightHigh } = getLightState(index)\n      vs.current.visible = onDarkSide\n      if (!onDarkSide) return\n      vs.current.material.uniforms.lightColor.value = lightLaser ? BEAM_COLOR_LASER : BEAM_COLOR_STANDARD\n      if (wide) {\n        vs.current.material.uniforms.anglePower.value = lightLaser ? 1.4 : 1.2\n        vs.current.scale.set(lightLaser ? 2 : 3.5, 1, 1)\n        vs.current.material.uniforms.attenuation.value = 3.9\n      } else {\n        let lightLength = 4\n        if (lightLaser) lightLength = 6\n        if (lightHigh) lightLength = 5\n        vs.current.material.uniforms.attenuation.value = lightLength\n        vs.current.material.uniforms.anglePower.value = lightLaser ? 1.3 : 1.2\n        vs.current.scale.set(lightLaser ? 1.5 : 3, 1, 1)\n      }\n    }\n  });\n\n  const setRef = React.useCallback(function setRef(el) {\n    vs.current = el;\n\n    if (ref) {\n      ref.current = el;\n    }\n  }, [ref]);\n\n  // // maps spotlight angle to volueme cylinder every frame\n  // // it would be better to do it on a need-to basis\n  // // but it doesn't play nice with react-spring\n  // useFrame(() => {\n  //   // const angle = spotlight.current.angle;\n\n  // });\n\n  return (\n    <>\n      {/* <spotLight */}\n      {/*   ref={spotlight} */}\n      {/*   intensity={initialized ? intensity : 0} */}\n      {/*   angle={angle} */}\n      {/*   penumbra={penumbra} */}\n      {/*   distance={distance} */}\n      {/*   color={color} */}\n      {/* /> */}\n      <mesh visible={false} ref={setRef} position={position}>\n        <cylinderGeometry args={[0.05, 0.25, geometryLength, 12, 1, openEnded]} attach=\"geometry\" />\n        <volumetricSpotlight\n          attach=\"material\"\n          uniforms-lightColor-value={color}\n          uniforms-attenuation-value={length} // as porportion to height of cylinder\n          uniforms-anglePower-value={angle}\n        />\n      </mesh>\n    </>\n  );\n});\n","import React, { useRef, createRef } from \"react\";\n\nimport { MyVolumetricSpotlight } from \"./VolumetricSpotlight\";\n\n\nexport function HeadlightBeams ({ locations }) {\n  const targetRefs = useRef(locations.map(() => createRef()))\n  const bloomRefs = useRef(locations.map(() => createRef()))\n\n  const beams = locations.map(({\n    position,\n    render\n  }, i ) => {\n    const posScaleFactor = render ? 0.98 : 0.995\n    return (\n      <group key={i}>\n        <mesh\n          ref={targetRefs.current[i]}\n          position={[position[0] * 10, position[1] * 10, position[2] * 10]}\n        />\n        <mesh\n          ref={bloomRefs.current[i]}\n          position={[position[0] * 2, position[1] * 2, position[2] * 2]}\n        />\n        <MyVolumetricSpotlight\n          position={[position[0] * posScaleFactor, position[1] * posScaleFactor, position[2] * posScaleFactor]}\n          index={i}\n          target={targetRefs.current[i]}\n          openEnded\n        />\n        {render && (\n          <MyVolumetricSpotlight\n            position={[position[0] * 1.02, position[1] * 1.02, position[2] * 1.02]}\n            length={3.9}\n            wide\n            index={i}\n            geometryLength={1}\n            target={bloomRefs.current[i]}\n            openEnded\n          />\n        )}\n      </group>\n    )\n  })\n\n  return (\n    <>\n      {beams}\n    </>\n  );\n};\n","import React, { useRef, useEffect } from 'react'\nimport * as THREE from 'three'\nimport { useLoader } from \"react-three-fiber\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\nimport { draco } from \"drei\";\n\nconst dummy = new THREE.Object3D();\n\nfunction initInstancedMesh(instanced, locations, lightGuide) {\n  locations.forEach((location, i) => {\n    const { position } = location\n    dummy.position.set(...position)\n    let scale = [0.015, 0.015, 0.015]\n    if (lightGuide === 'on' && !location.onDarkSide) {\n      scale = [0, 0, 0]\n    }\n    if (lightGuide === 'off' && location.onDarkSide) {\n      scale = [0, 0, 0]\n    }\n    dummy.scale.set(...scale)\n    dummy.lookAt(0, 0, 0)\n    dummy.rotateY( 5.6 * Math.PI / 4)\n    dummy.updateMatrix()\n    instanced.current.setMatrixAt(i, dummy.matrix)\n  })\n  instanced.current.instanceMatrix.needsUpdate = true\n}\n\nexport function FillerLights ({ locations }) {\n  const { nodes } = useLoader(\n    GLTFLoader,\n    process.env.PUBLIC_URL + \"/laser.glb\",\n    draco(process.env.PUBLIC_URL + \"/draco-gltf/\")\n  )\n\n  const instancedMeshVisor = useRef()\n  const instancedMeshLightGuideOn = useRef()\n  const instancedMeshLightGuideOff = useRef()\n  const instancedMeshLens = useRef()\n\n\n  useEffect(() => {\n    initInstancedMesh(instancedMeshVisor, locations);\n    initInstancedMesh(instancedMeshLightGuideOn, locations, 'on');\n    initInstancedMesh(instancedMeshLightGuideOff, locations, 'off');\n    initInstancedMesh(instancedMeshLens, locations);\n  }, [locations])\n\n  return (\n    <group>\n      <instancedMesh ref={instancedMeshVisor} userData={{ bloom: true }} geometry={nodes['visor'].geometry} args={[null, null, locations.length]} >\n        <meshStandardMaterial\n          attach=\"material\"\n          color={0xccccff}\n          roughness={0.05}\n          metalness={0.9}\n          opacity={0.7}\n          transparent\n          depthWrite={false}\n        />\n      </instancedMesh>\n      <instancedMesh ref={instancedMeshLightGuideOff} geometry={nodes['light-guide'].geometry} args={[null, null, locations.length]} >\n        <meshStandardMaterial\n          attach=\"material\"\n          color={0xddeeff}\n          roughness={0.2}\n          metalness={0.8}\n          opacity={0.4}\n          transparent\n          depthWrite={false}\n        />\n      </instancedMesh>\n      <instancedMesh ref={instancedMeshLightGuideOn} userData={{ bloom: true }} geometry={nodes['light-guide'].geometry} args={[null, null, locations.length]} >\n        <meshStandardMaterial\n          attach=\"material\"\n          color={0xddeeff}\n          roughness={0.2}\n          metalness={0.8}\n          emissive={0xaaaaff}\n          opacity={0.4}\n          depthWrite={false}\n          transparent\n        />\n      </instancedMesh>\n      <instancedMesh ref={instancedMeshLens} geometry={nodes['lens'].geometry} args={[null, null, locations.length]} >\n        <meshStandardMaterial\n          attach=\"material\"\n          roughness={0.3}\n          metalness={0.5}\n          color={0xaaaaff}\n          depthWrite={false}\n          opacity={0.4}\n          transparent\n        />\n      </instancedMesh>\n    </group>\n  )\n}\n","import React from \"react\"\nimport { useTextureLoader } from \"drei\"\nimport { Vector2, RepeatWrapping } from \"three\"\n\nconst WIDTH_SEGMENTS = 23\nconst HEIGHT_SEGMENTS = 23\n\nexport function Oceans ({ radius }) {\n  const topo = useTextureLoader(process.env.PUBLIC_URL + '/topo-black-level.png')\n  const ocean = useTextureLoader(process.env.PUBLIC_URL + '/ocean-texture.png')\n  topo.offset = new Vector2(0.5, 0)\n  topo.wrapS = RepeatWrapping\n  ocean.offset = new Vector2(0.5, 0)\n  ocean.wrapS = RepeatWrapping\n  return (\n    <mesh>\n      <sphereBufferGeometry args={[radius - 0.1, WIDTH_SEGMENTS, HEIGHT_SEGMENTS]} />\n      <meshPhongMaterial\n        color={0xeeeeff}\n        alphaMap={topo}\n        map={ocean}\n        shininess={30}\n        transparent\n        depthWrite={false}\n      />\n    </mesh>\n  )\n}\n","import React, { useRef, useMemo } from \"react\"\nimport { useFrame } from \"react-three-fiber\"\n\nimport {\n  sphericalCoordsToCartesian,\n  latlngToSphericalCoords,\n  calculateAngleForTime,\n} from \"../../lib\"\nimport { EightSeriesHeadlights } from \"./Headlights/EightSeriesHeadlights\"\nimport { ThreeSeriesHeadlights } from \"./Headlights/ThreeSeriesHeadlights\"\nimport { HeadlightBeams } from \"./Headlights/HeadlightBeams\"\nimport { FillerLights } from \"./Headlights/FillerLights\"\nimport { Oceans } from \"./Oceans\"\nimport { RADIUS } from \"../../constants\"\n\nconst PRECISION = 7\n\nexport function LightGlobe ({ cities }) {\n  const group = useRef()\n\n  useFrame(() => {\n    const r = calculateAngleForTime()\n    group.current.rotation.y = r\n  })\n\n  const locations = useMemo(() =>\n    cities\n      .reduce((acc, cur) => {\n          const localMaxCity = acc.reduce((a, c) => (\n            (Math.abs(a.lat - c.lat) < PRECISION && Math.abs(a.lng - c.lng) < PRECISION) && c.population > a.population\n            ? c\n            : a\n          ), cur)\n          if (localMaxCity && !acc.find(c => c === localMaxCity)) return acc.concat(localMaxCity)\n          return acc\n        }, [])\n      .map(({ lat, lng, name, render }, i) => {\n        const [inc, azm ] = latlngToSphericalCoords(lat, lng)\n        const position = sphericalCoordsToCartesian(render ? RADIUS : RADIUS - 0.03, inc, azm);\n        return {\n          render,\n          position,\n          name,\n        }\n      }),\n    [cities]\n  )\n\n  // const locations = dedupedLocations\n  //   .map(({ lat, lng, name, render }, i) => {\n  //     const [inc, azm ] = latlngToSphericalCoords(lat, lng)\n  //     const position = sphericalCoordsToCartesian(render ? RADIUS : RADIUS - 0.03, inc, azm);\n  //     const pos = new Vector3(...position)\n  //     const worldPos = pos.applyMatrix4(new Matrix4().makeRotationY(rotation))\n  //     const onDarkSide = !!(worldPos.x > 0.1)\n  //     const offset = i * 1000 + ((i / dedupedLocations.length) * 1000)\n  //     const lightLow = isIntervalActive(120 * 1000, 0, 40 * 1000, offset)\n  //     const lightHigh = isIntervalActive(120 * 1000, 40 * 1000, 70 * 1000, offset)\n  //     const lightLaser = isIntervalActive(120 * 1000, 70 * 1000, 120 * 1000, offset)\n  //     const turnLightOn = isIntervalActive(60 * 1000, 0, 20 * 1000, offset) && isIntervalActive(2 * 1000, 0, 1 * 1000, offset)\n  //     // TODO:\n  //     // 1. turn signals blinks on and off for thirty seconds\n  //     // 2. goes from hi-beam to low-beam on one minute interval\n  //     // 3. angles down 20 degrees for fifteen seconds\n  //     return {\n  //       render,\n  //       position,\n  //       name,\n  //       onDarkSide,\n  //       turnLightOn,\n  //       lightLow,\n  //       lightHigh,\n  //       lightLaser\n  //     }\n  //   })\n\n  return (\n    <group ref={group}>\n      <EightSeriesHeadlights locations={locations.filter(({ render }) => render === 'EightSeries')} />\n      <ThreeSeriesHeadlights locations={locations.filter(({ render }) => render === 'ThreeSeries')} />\n      <FillerLights locations={locations.filter(({ render }) => !render)} />\n      <HeadlightBeams locations={locations} />\n      <Oceans radius={RADIUS} />\n    </group>\n  );\n};\n","import React from \"react\"\nimport { Html, useProgress } from \"drei\"\nimport { IS_LIVE } from \"../constants\"\n\nexport function LoadingIndicator () {\n  const { progress, errors } = useProgress()\n  if (errors.length) console.log(errors)\n  let loadingText = `Loading ${Math.round(progress)}%`\n  if (!IS_LIVE) loadingText = 'Coming October 7th'\n  if (errors.length) loadingText = 'Error'\n  return (\n    <Html center>\n      <div className='loading'>\n        <svg xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 500 500\">\n          <title>TOMORROW WILL BE NOTHING LIKE TODAY WILL BE NOTHING LIKE</title>\n          <defs>\n            <path d=\"M50,250c0-110.5,89.5-200,200-200s200,89.5,200,200s-89.5,200-200,200S50,360.5,50,250\" id=\"textcircle\">\n              <animateTransform\n                attributeName=\"transform\"\n                begin=\"0s\"\n                dur=\"30s\"\n                type=\"rotate\"\n                from=\"0 250 250\"\n                to=\"360 250 250\"\n                repeatCount=\"indefinite\"\n              />\n              </path>\n            </defs>\n            <text className=\"progress\" x=\"50%\" y=\"50%\" dominantBaseline=\"middle\" textAnchor=\"middle\">\n              { loadingText }\n            </text>\n            <text dy=\"70\" textLength=\"1220\">\n              <textPath className=\"circle-text\" xlinkHref=\"#textcircle\">TOMORROW WILL BE NOTHING LIKE TODAY WILL BE NOTHING LIKE</textPath>\n            </text>\n          </svg>\n        </div>\n      </Html>\n  )\n\n}\n","import { useEffect, useMemo } from 'react'\nimport * as THREE from 'three'\nimport { extend, useFrame, useThree } from 'react-three-fiber'\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer'\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass'\nimport { UnrealBloomPass } from 'three/examples/jsm/postprocessing/UnrealBloomPass'\nimport { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass'\n\nextend({ EffectComposer, RenderPass, UnrealBloomPass })\n\nconst materials = {}\nconst darkMaterial = new THREE.MeshBasicMaterial({ color: 'black' })\nconst transparentDarkMaterial = new THREE.MeshBasicMaterial({ color: 'black', depthWrite: false })\nconst darkenNonBloomed = obj => {\n  if (obj.isMesh && !obj.userData.bloom) {\n    materials[obj.uuid] = obj.material\n    obj.material = obj.material.depthWrite ? darkMaterial : transparentDarkMaterial\n  }\n}\nconst restoreMaterial = obj => materials[obj.uuid] && ((obj.material = materials[obj.uuid]), delete materials[obj.uuid])\n\nexport function Effects() {\n  const { gl, scene, camera, size } = useThree()\n  // const bloomStrength = useControl('Bloom Strength', { type: 'number', value: 2.3 })\n  // const bloomThreshold = useControl('Bloom Threshold', { type: 'number', value: 0.2 })\n  const bloomStrength = 2\n  const bloomThreshold = 0.23\n\n  const [bloom, final] = useMemo(() => {\n    const renderScene = new RenderPass(scene, camera)\n    const comp = new EffectComposer(gl)\n    comp.renderToScreen = false\n    comp.addPass(renderScene)\n    comp.addPass(new UnrealBloomPass(new THREE.Vector2(size.width, size.height), bloomStrength, 0, bloomThreshold))\n\n    const finalComposer = new EffectComposer(gl)\n    finalComposer.addPass(renderScene)\n    const finalPass = new ShaderPass(\n      new THREE.ShaderMaterial({\n        uniforms: { baseTexture: { value: null }, bloomTexture: { value: comp.renderTarget2.texture } },\n        vertexShader:\n          'varying vec2 vUv; void main() { vUv = uv; gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 ); }',\n        fragmentShader:\n          'uniform sampler2D baseTexture; uniform sampler2D bloomTexture; varying vec2 vUv; void main() { gl_FragColor = ( texture2D(baseTexture, vUv) + vec4( 1.0 ) * texture2D( bloomTexture, vUv ) ); }'\n      }),\n      'baseTexture'\n    )\n    finalPass.needsSwap = true\n    finalComposer.addPass(finalPass)\n    return [comp, finalComposer]\n  }, [camera, gl, scene, size.height, size.width, bloomStrength, bloomThreshold])\n\n  useEffect(() => {\n    bloom.setSize(size.width, size.height)\n    final.setSize(size.width, size.height)\n  }, [bloom, final, size])\n\n  useFrame(({ scene, camera }) => {\n    // https://github.com/mrdoob/three.js/blob/master/examples/webgl_postprocessing_unreal_bloom_selective.html\n    // this seems kinda dirty, it mutates the scene and overwrites materials\n    scene.traverse(darkenNonBloomed)\n    bloom.render()\n    scene.traverse(restoreMaterial)\n    // then writes the normal scene on top\n    final.render()\n  }, 1)\n\n  return null\n}\n\n","import React from \"react\"\nimport { useFrame } from \"react-three-fiber\"\nimport { Vector3 } from \"three\"\nimport shallow from \"zustand/shallow\"\nimport { OrbitControls } from \"drei\"\n\nimport { useStore } from \"../store\"\nimport { RADIUS, ZOOM_DURATION } from \"../constants\"\n\nexport function CameraRig () {\n  const [zoomTarget, zoomStartTime, zoomStartPosition] = useStore(state =>\n    [state.zoomTarget, state.zoomStartTime, state.zoomStartPosition], shallow)\n  const setZoomStartTime = useStore(state => state.setZoomStartTime)\n  const setZoomStartPosition = useStore(state => state.setZoomStartPosition)\n  const setZoomTarget = useStore(state => state.setZoomTarget)\n\n  useFrame(({ camera, clock }) => {\n    if (zoomTarget) {\n      if (!zoomStartTime) {\n        setZoomStartTime(clock.elapsedTime)\n        setZoomStartPosition(new Vector3().copy(camera.position)) // copy, otherwise reference is stored!\n        return\n      }\n      let zoomDurationScaledByDistance = ZOOM_DURATION\n      const distanceToZoom = zoomStartPosition.distanceTo(zoomTarget)\n      if (distanceToZoom < 0.5) zoomDurationScaledByDistance = ZOOM_DURATION / 6\n      if (distanceToZoom < 1) zoomDurationScaledByDistance = ZOOM_DURATION / 2\n      if (distanceToZoom > 3) zoomDurationScaledByDistance = ZOOM_DURATION * 1.5\n      if (!zoomDurationScaledByDistance || clock.elapsedTime > zoomStartTime + zoomDurationScaledByDistance) {\n        setZoomTarget(null)\n        setZoomStartTime(null)\n        setZoomStartPosition(null)\n        return\n      }\n      const a = (clock.elapsedTime - zoomStartTime) / zoomDurationScaledByDistance\n      const newCamPos = new Vector3().lerpVectors(zoomStartPosition, zoomTarget, a)\n      camera.position.copy(newCamPos)\n      camera.updateProjectionMatrix()\n    }\n  })\n\n\n  return (\n    <OrbitControls enableDamping minDistance={RADIUS} maxDistance={20} enablePan={false} zoomSpeed={0.2} />\n  )\n}\n","import React, { forwardRef, useMemo, useRef } from 'react'\nimport { useFrame } from 'react-three-fiber'\nimport { Vector3, Spherical, Color, AdditiveBlending, ShaderMaterial } from 'three'\n\nclass StarfieldMaterial extends ShaderMaterial {\n  constructor() {\n    super({\n      uniforms: { time: { value: 0.0 }, fade: { value: 1.0 } },\n      depthWrite: false,\n      vertexShader: `uniform float time;\n      attribute float size;\n      varying vec3 vColor;\n      void main() {\n        vColor = color;\n        vec4 mvPosition = modelViewMatrix * vec4(position, 0.5);\n        gl_PointSize = size * (30.0 / -mvPosition.z) * (3.0 + sin(mvPosition.x + 2.0 * time + 100.0));\n        gl_Position = projectionMatrix * mvPosition;\n      }`,\n      fragmentShader: `uniform sampler2D pointTexture;\n      uniform float fade;\n      varying vec3 vColor;\n      void main() {\n        float opacity = 1.0;\n        if (fade == 1.0) {\n          float d = distance(gl_PointCoord, vec2(0.5, 0.5));\n          opacity = 1.0 / (1.0 + exp(16.0 * (d - 0.25)));\n        }\n        gl_FragColor = vec4(vColor, opacity);\n      }`,\n    })\n  }\n}\n\n\nconst genStar = (r) => {\n  return new Vector3().setFromSpherical(new Spherical(r, Math.acos(1 - Math.random() * 2), Math.random() * 2 * Math.PI)) }\n\nexport const Stars = forwardRef(\n  ({ radius = 100, depth = 50, count = 5000, saturation = 0, factor = 4, fade = false }, ref) => {\n    const material = useRef()\n    const [position, color, size] = useMemo(() => {\n      const positions = []\n      const colors = []\n      const sizes = Array.from({ length: count }, () => (0.5 + 0.5 * Math.random()) * factor)\n      const color = new Color()\n      let r = radius + depth\n      const increment = depth / count\n      for (let i = 0; i < count; i++) {\n        r -= increment * Math.random()\n        positions.push(...genStar(r).toArray())\n        color.setHSL(i / count, saturation, 1)\n        colors.push(color.r, color.g, color.b)\n      }\n      return [new Float32Array(positions), new Float32Array(colors), new Float32Array(sizes)]\n    }, [count, depth, factor, radius, saturation])\n    useFrame((state) => material.current && (material.current.uniforms.time.value = state.clock.getElapsedTime()))\n\n    const starfieldMaterial = useMemo(() => new StarfieldMaterial(), [])\n\n    return (\n      <points ref={ref}>\n        <bufferGeometry attach=\"geometry\">\n          <bufferAttribute attachObject={['attributes', 'position']} args={[position, 3]} />\n          <bufferAttribute attachObject={['attributes', 'color']} args={[color, 3]} />\n          <bufferAttribute attachObject={['attributes', 'size']} args={[size, 1]} />\n        </bufferGeometry>\n        <primitive\n          ref={material}\n          object={starfieldMaterial}\n          attach=\"material\"\n          blending={AdditiveBlending}\n          uniforms-fade-value={fade}\n          transparent\n          vertexColors\n        />\n      </points>\n    )\n  }\n)\n","import \"./styles.css\"\n\nimport React, { Suspense } from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { ControlsProvider } from 'react-three-gui'\nimport Credits from \"./components/Credits\"\nimport { Canvas } from \"react-three-fiber\"\nimport { CineonToneMapping } from \"three\"\nimport cities from \"./lib/cities.json\"\nimport Lights from \"./components/Lights\"\nimport { LightGlobe } from \"./components/LightGlobe/LightGlobe\"\nimport { Stats } from \"drei\"\nimport { LoadingIndicator } from \"./components/LoadingIndicator\"\nimport { BG_COLOR, IS_LIVE } from \"./constants\"\nimport { Effects } from \"./components/Effects\"\nimport { CameraRig } from \"./components/CameraRig\"\nimport { Stars } from \"./components/Stars\"\n\nfunction App() {\n  return (\n    <>\n      <Credits/>\n      <ControlsProvider>\n        <Canvas\n          colorManagement\n          concurrent\n          onCreated={({ gl }) => gl.setClearColor(BG_COLOR)}\n          gl={{ antialias: true, toneMapping: CineonToneMapping }}\n        >\n          <fogExp2 attach=\"fog\" args={[\"#020202\", 0.15]} />\n          <Lights />\n          {\n            IS_LIVE\n              ? (\n                <Suspense fallback={<LoadingIndicator />}>\n                  <LightGlobe cities={cities} />\n                </Suspense>\n              )\n              : <LoadingIndicator />\n          }\n          <CameraRig />\n          <Stars factor={2.5} saturation={0.3} fade />\n          <Stats />\n          <Effects />\n        </Canvas>\n      </ControlsProvider>\n    </>\n  );\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n\n"],"sourceRoot":""}