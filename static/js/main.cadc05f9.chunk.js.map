{"version":3,"sources":["components/Credits/index.js","components/Lights/index.js","lib/index.js","constants.js","store.js","components/LightGlobe/Headlights/EightSeriesHeadlights.js","components/LightGlobe/Headlights/ThreeSeriesHeadlights.js","lib/volumetric-spotlight.js","components/LightGlobe/Headlights/VolumetricSpotlight.js","components/LightGlobe/Headlights/HeadlightBeams.js","components/LightGlobe/Headlights/FillerLights.js","components/WebcamImageManager.js","components/LightGlobe/Oceans.js","components/LightGlobe/LightGlobe.js","components/LoadingIndicator.js","components/Effects.js","components/CameraRig.js","components/Stars.js","index.js"],"names":["className","rel","href","target","intensity","position","layers","userData","bloom","attach","args","color","fog","calculateAngleForTime","Math","floor","Date","valueOf","PI","isIntervalActive","periodLength","intervalStart","intervalEnd","offset","t","getTime","OFFSETS","Array","from","cities","length","map","random","getLightState","i","lightLow","lightHigh","lightLaser","turnLightOn","HEADLIGHT_BODY_COLOR","Color","TURN_SIGNAL_COLOR","BEAM_COLOR_LASER","BEAM_COLOR_STANDARD","EMISSIVE_COLOR_LASER","EMISSIVE_COLOR_STANDARD","EMISSIVE_COLOR_LOW","EMISSIVE_COLOR_OFF","useStore","create","set","zoomTarget","zoomStartTime","zoomStartPosition","envMap","setZoomTarget","state","setZoomStartTime","setZoomStartPosition","zoomToMesh","e","stopPropagation","object","updateMatrixWorld","worldPos","Vector3","headlightPos","getWorldPosition","x","y","z","console","log","multiplyScalar","handleHoverMesh","document","getElementById","innerHTML","handleUnhoverMesh","setEnvMap","EightSeriesHeadlights","locations","shallow","nodes","useLoader","GLTFLoader","process","lowDetailNodes","refs","useRef","createRef","griddyThingRefs","griddyThingInsideRefs","griddyThingLowDetailRefs","topLightRefs","useEffect","current","r","lookAt","rotateY","useFrame","onDarkSide","emissiveColor","griddyThing","material","emissive","griddyThingInside","griddyThingLowDetail","topLightLOD","children","meshObjects","name","scale","key","ref","visible","geometry","onClick","onPointerOver","onPointerOut","roughness","envMapIntensity","metalness","opacity","transparent","depthWrite","distances","side","BackSide","ThreeSeriesHeadlights","bulbRefs","bulbs","blinkingOff","VolumetricSpotLightMaterial","vertexShader","join","fragmentShader","THREE","uniforms","attenuation","type","value","anglePower","spotPosition","lightColor","extend","VolumetricSpotlight","MyVolumetricSpotlight","React","forwardRef","props","vs","scene","useThree","index","angle","geometryLength","openEnded","wide","clock","useState","elapsedTime","startTime","applyMatrix4","makeTranslation","parameters","height","makeRotationX","targetPos","rotateZ","lightLength","setRef","useCallback","el","uniforms-attenuation-value","uniforms-anglePower-value","HeadlightBeams","targetRefs","bloomRefs","beams","render","posScaleFactor","dummy","initInstancedMesh","instanced","lightGuide","forEach","location","makeRotationY","updateMatrix","setMatrixAt","matrix","instanceMatrix","needsUpdate","FillerLights","draco","instancedMeshVisor","instancedMeshLightGuideOn","instancedMeshLightGuideOff","instancedMeshLens","hkSrc","nycSrc","corsProxy","WebcamImageManager","edgeBlur","useTextureLoader","nycImgRef","hkImgRef","WebGLCubeRenderTarget","generateMipmaps","renderTarget","cubeCamera","nycWebcamRef","hkWebcamRef","nycLocation","find","l","hkLocation","gl","newNycSrc","camera","newHkSrc","src","update","rotation","texture","onload","tex","Texture","alphaMap","hidden","alt","style","display","crossOrigin","Oceans","radius","topo","ocean","specular","Vector2","wrapS","RepeatWrapping","specularMap","LightGlobe","group","useMemo","reduce","acc","cur","localMaxCity","a","c","abs","lat","lng","population","concat","latlngToSphericalCoords","inclination","azimuth","sin","cos","sphericalCoordsToCartesian","RADIUS","filter","LoadingIndicator","useProgress","progress","errors","loadingText","round","center","xmlns","xmlnsXlink","viewBox","d","id","attributeName","begin","dur","to","repeatCount","dominantBaseline","textAnchor","dy","textLength","xlinkHref","EffectComposer","RenderPass","UnrealBloomPass","materials","darkMaterial","transparentDarkMaterial","darkenNonBloomed","obj","isMesh","uuid","restoreMaterial","Effects","size","renderScene","comp","renderToScreen","addPass","width","finalComposer","finalPass","ShaderPass","baseTexture","bloomTexture","renderTarget2","needsSwap","final","setSize","traverse","CameraRig","orbitControlsRef","cameraDistance","zoomSpeed","rotateSpeed","copy","zoomDurationScaledByDistance","distanceToZoom","distanceTo","ZOOM_DURATION","newCamPos","lerpVectors","updateProjectionMatrix","enableDamping","minDistance","maxDistance","enablePan","StarfieldMaterial","time","fade","ShaderMaterial","genStar","setFromSpherical","Spherical","acos","Stars","depth","count","saturation","factor","positions","colors","sizes","increment","push","toArray","setHSL","g","b","Float32Array","getElapsedTime","starfieldMaterial","attachObject","blending","AdditiveBlending","uniforms-fade-value","vertexColors","App","Credits","colorManagement","concurrent","onCreated","setClearColor","antialias","toneMapping","CineonToneMapping","Lights","fallback","rootElement","ReactDOM"],"mappings":"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","file":"static/js/main.cadc05f9.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default () => {\n  return (\n    <div className=\"credits\">\n      <a\n        rel=\"noopener noreferrer\"\n        href=\"https://www.frieze.com/madeline-hollander-2020-sunrise-sunset\"\n        target=\"_blank\"\n      >\n        Sunrise / Sunset\n      </a>\n      <br />\n      <a\n        rel=\"noopener noreferrer\"\n        href=\"https://www.frieze.com/madeline-hollander-2020-sunrise-sunset\"\n        target=\"_blank\"\n      >\n        Madeline Hollander\n      </a>\n    </div>\n  );\n};\n","import React from \"react\";\n\nexport default () => {\n  return (\n    <group>\n      <ambientLight intensity={0.4} />\n      <mesh position={[-200, -10, 0]} layers={[0, 11]} userData={{ bloom: true }}>\n        <sphereBufferGeometry attach=\"geometry\" args={[4, 32, 32]} />\n        <meshBasicMaterial attach=\"material\" color=\"#EEEE88\" fog={false} />\n      </mesh>\n      <directionalLight\n        intensity={1.5}\n        position={[-1, 0, 0]}\n        color={0xffffe4}\n      />\n    </group>\n  );\n};\n","import cities from \"./cities.json\"\nexport function sphericalCoordsToCartesian (radius, inclination, azimuth) {\n  /*\n   * Inclination is in the range [0, pi], from straight up (the zenith)\n   * Azimuth is in the range [0, 2pi], from the x axis\n   * See: https://en.wikipedia.org/wiki/Spherical_coordinate_system#Cartesian_coordinates\n   */\n  const x = radius * Math.sin(inclination) * Math.cos(azimuth);\n  const z = radius * Math.sin(inclination) * Math.sin(azimuth);\n  const y = radius * Math.cos(inclination);\n  return [-x, y, z];\n}\n\nexport function latlngToSphericalCoords (lat, lng) {\n  const inclination = Math.PI * (lat > 0 ? 90 - lat : 90 + Math.abs(lat)) / 180;\n  const azimuth = 2 * Math.PI * (lng >= 0 ? lng : 360 - Math.abs(lng)) / 360; \n  return [inclination, azimuth];\n}\n\nconst SECONDS_IN_DAY = 24 * 60 * 60;\n\nexport function calculateAngleForTime () {\n  const unixEraSeconds = Math.floor(new Date().valueOf() / 1000);\n  const secondsElapsedInDay = unixEraSeconds % SECONDS_IN_DAY;\n  const dayProgress = secondsElapsedInDay / SECONDS_IN_DAY;\n  return dayProgress * 2 * Math.PI + Math.PI;\n}\n\nexport function isIntervalActive (periodLength, intervalStart, intervalEnd, offset) {\n  const t = (new Date().getTime() + offset) % (periodLength)\n  return t < intervalEnd && t >= intervalStart;\n}\n\nconst OFFSETS = Array.from(Array(cities.length)).map(() => Math.random() * 120 * 1000)\n\nexport function getLightState (i) {\n  const offset = OFFSETS[i]\n  const lightLow = isIntervalActive(120 * 1000, 0, 40 * 1000, offset)\n  const lightHigh = isIntervalActive(120 * 1000, 40 * 1000, 70 * 1000, offset)\n  const lightLaser = isIntervalActive(120 * 1000, 70 * 1000, 120 * 1000, offset)\n  const turnLightOn = isIntervalActive(60 * 1000, 0, 20 * 1000, offset) && isIntervalActive(1 * 1500, 0, 750, offset)\n  return {\n    lightLow,\n    lightHigh,\n    lightLaser,\n    turnLightOn\n  }\n}\n","import { Color } from 'three'\n// colors\nexport const BG_COLOR = ''\nexport const HEADLIGHT_BODY_COLOR = new Color(0x838b9f)\nexport const TURN_SIGNAL_COLOR = new Color(0xF18F17)\nexport const BODY_HIGHLIGHT_COLOR = 0x0a25ad\nexport const BODY_DARK_COLOR = 0x242529\nexport const BEAM_COLOR_LASER = new Color(0xE9E0FF)\nexport const BEAM_COLOR_STANDARD = new Color(0xEAEEF8)\nexport const EMISSIVE_COLOR_LASER = new Color(0x9999ff)\nexport const EMISSIVE_COLOR_STANDARD = new Color(0xadaacc)\nexport const EMISSIVE_COLOR_LOW = new Color(0x666677)\nexport const EMISSIVE_COLOR_OFF = new Color(0x000000)\nexport const PLASTIC_COLOR = 0xddeeff\n\n// geometry\nexport const RADIUS = 3\n\n// other\nexport const DEFAULT_LAYER = 0\nexport const BLOOM_LAYER = 1\nexport const ZOOM_DURATION = 1.5\nexport const IS_LIVE = true\n","import create from 'zustand'\nimport { Vector3 } from \"three\"\n\nexport const useStore = create(set => ({\n  zoomTarget: null,\n  zoomStartTime: null,\n  zoomStartPosition: null,\n  envMap: null,\n  setZoomTarget: (zoomTarget) => set(state => ({ zoomTarget })),\n  setZoomStartTime: (zoomStartTime) => set(state => ({ zoomStartTime })),\n  setZoomStartPosition: (zoomStartPosition) => set(state => ({ zoomStartPosition })),\n  zoomToMesh: (e) => {\n    e.stopPropagation();\n    e.object.updateMatrixWorld()\n    const worldPos = new Vector3()\n    const headlightPos = e.object.getWorldPosition(worldPos)\n    if (headlightPos.x === 0 && headlightPos.y === 0 && headlightPos.z === 0) return console.log('zero')\n    return set(state => ({\n      zoomTarget: headlightPos.multiplyScalar(1.1)\n    }))\n  },\n  handleHoverMesh: (e) => {\n    e.stopPropagation();\n    e.object.updateMatrixWorld()\n    const worldPos = new Vector3()\n    const headlightPos = e.object.getWorldPosition(worldPos)\n    if (headlightPos.x === 0 && headlightPos.y === 0 && headlightPos.z === 0) return console.log('zero')\n    document.getElementById('cursor-style').innerHTML = 'body { cursor: pointer }'\n  },\n  handleUnhoverMesh: (e) => {\n    e.stopPropagation();\n    document.getElementById('cursor-style').innerHTML = ''\n  },\n  setEnvMap: envMap => set(state => ({ envMap }))\n}))\n","import React, { useEffect, useRef, createRef } from 'react'\nimport { useLoader, useFrame } from \"react-three-fiber\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\nimport { Detailed } from \"drei\";\nimport { BackSide, Vector3 } from \"three\";\nimport shallow from \"zustand/shallow\"\nimport {\n  PLASTIC_COLOR,\n  HEADLIGHT_BODY_COLOR,\n  BODY_HIGHLIGHT_COLOR,\n  TURN_SIGNAL_COLOR,\n  EMISSIVE_COLOR_LASER,\n  EMISSIVE_COLOR_STANDARD,\n  EMISSIVE_COLOR_OFF,\n  EMISSIVE_COLOR_LOW\n} from \"../../../constants\"\nimport { useStore } from '../../../store'\nimport { getLightState } from \"../../../lib\"\n\n\nexport function EightSeriesHeadlights ({ locations }) {\n  const [zoomToMesh, handleHoverMesh, handleUnhoverMesh] = useStore(state => [\n    state.zoomToMesh,\n    state.handleHoverMesh,\n    state.handleUnhoverMesh,\n  ], shallow)\n  const envMap = useStore(state => state.envMap)\n\n  const { nodes } = useLoader(\n    GLTFLoader,\n    process.env.PUBLIC_URL + \"/eight-series-high-lod.glb\",\n  );\n\n  const { nodes: lowDetailNodes } = useLoader(\n    GLTFLoader,\n    process.env.PUBLIC_URL + \"/eight-series-low-lod.glb\",\n  );\n\n  const refs = useRef(locations.map(() => createRef()))\n  const griddyThingRefs = useRef(locations.map(() => createRef()))\n  const griddyThingInsideRefs = useRef(locations.map(() => createRef()))\n  const griddyThingLowDetailRefs = useRef(locations.map(() => createRef()))\n  const topLightRefs = useRef(locations.map(() => createRef()))\n\n  useEffect(() => {\n    for (const r of refs.current) {\n      r.current.lookAt(0,0,0)\n      // r.current.rotateX(Math.PI / 2)\n      r.current.rotateY( 5 * Math.PI / 4)\n      // r.current.rotateZ(Math.PI / 4)\n    }\n  }, [])\n\n  useFrame(() => {\n    let worldPos = new Vector3()\n    for (let i = 0; i < locations.length; i++) {\n      const headlight = refs.current[i].current;\n      headlight.getWorldPosition(worldPos)\n      const onDarkSide = !!(worldPos.x > 0.1)\n      const { lightLaser, turnLightOn, lightLow } = getLightState(i)\n      const emissiveColor = lightLaser ? EMISSIVE_COLOR_LASER : lightLow ? EMISSIVE_COLOR_LOW : EMISSIVE_COLOR_STANDARD\n      const griddyThing = griddyThingRefs.current[i].current\n      griddyThing.material.emissive = onDarkSide ? emissiveColor : false\n      griddyThing.userData = { bloom: onDarkSide }\n      const griddyThingInside = griddyThingInsideRefs.current[i].current\n      griddyThingInside.material.emissive = onDarkSide ? emissiveColor : false\n      griddyThingInside.userData = { bloom: onDarkSide }\n      const griddyThingLowDetail = griddyThingLowDetailRefs.current[i].current\n      griddyThingLowDetail.material.emissive = onDarkSide ? emissiveColor : false\n      griddyThingLowDetail.userData = { bloom: onDarkSide }\n      const topLightLOD = topLightRefs.current[i].current\n      topLightLOD.children[0].material.emissive = turnLightOn ? TURN_SIGNAL_COLOR : onDarkSide ? emissiveColor : EMISSIVE_COLOR_OFF\n      topLightLOD.children[1].material.emissive = turnLightOn ? TURN_SIGNAL_COLOR : onDarkSide ? emissiveColor : EMISSIVE_COLOR_OFF\n      topLightLOD.children[0].userData = { bloom: turnLightOn ? true : onDarkSide }\n      topLightLOD.children[1].userData = { bloom: turnLightOn ? true : onDarkSide }\n    }\n  })\n\n  const meshObjects = locations.map(({ position, name }, i) => {\n    return (\n      <group scale={[0.02, 0.02, 0.02 ]} key={name} position={position} ref={refs.current[i]}>\n        <mesh\n          visible\n          geometry={lowDetailNodes['visor'].geometry}\n          onClick={zoomToMesh}\n          onPointerOver={handleHoverMesh}\n          onPointerOut={handleUnhoverMesh}\n        >\n          <meshStandardMaterial\n            attach=\"material\"\n            color={0xeeeeee}\n            roughness={0.09}\n            envMap={envMap}\n            envMapIntensity={1.4}\n            metalness={0.9}\n            opacity={0.7}\n            transparent\n            depthWrite={false}\n          />\n        </mesh>\n        <Detailed distances={[0, 3.5]}>\n          <mesh visible geometry={nodes['headlight-simpler'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={HEADLIGHT_BODY_COLOR}\n              roughness={0.4}\n              metalness={0.9}\n            />\n          </mesh>\n          <mesh visible geometry={lowDetailNodes['headlight-simpler'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={HEADLIGHT_BODY_COLOR}\n              roughness={0.2}\n              metalness={0.8}\n            />\n          </mesh>\n        </Detailed>\n        <Detailed distances={[0, 1.75]}>\n          <mesh>\n            <mesh ref={griddyThingRefs.current[i]} visible geometry={lowDetailNodes['griddy-thing'].geometry}>\n              <meshStandardMaterial\n                attach=\"material\"\n                color={PLASTIC_COLOR}\n                roughness={0.1}\n                metalness={0.9}\n                opacity={0.3}\n                transparent\n                depthWrite={false}\n              />\n            </mesh>\n            <mesh ref={griddyThingInsideRefs.current[i]} visible geometry={nodes['griddy-thing'].geometry}>\n              <meshStandardMaterial\n                attach=\"material\"\n                color={PLASTIC_COLOR}\n                roughness={0.1}\n                metalness={0.9}\n                opacity={0.4}\n                transparent\n                depthWrite={false}\n                side={BackSide}\n              />\n            </mesh>\n          </mesh>\n          <mesh visible ref={griddyThingLowDetailRefs.current[i]} geometry={lowDetailNodes['griddy-thing'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={PLASTIC_COLOR}\n              roughness={0.1}\n              metalness={0.9}\n              depthWrite={false}\n            />\n          </mesh>\n        </Detailed>\n        <mesh visible geometry={lowDetailNodes['bulbs'].geometry}>\n          <meshStandardMaterial\n            attach=\"material\"\n            color={0xaaaaff}\n            roughness={0.3}\n            metalness={0.5}\n            emissive={0xffffff}\n          />\n        </mesh>\n        <Detailed ref={topLightRefs.current[i]} distances={[0, 2.5]}>\n          <mesh visible geometry={nodes['top-light'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={0xddeeff}\n              roughness={0.1}\n              metalness={0.8}\n              opacity={0.7}\n              depthWrite={false}\n            />\n          </mesh>\n          <mesh visible geometry={lowDetailNodes['top-light'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={0xddeeff}\n              roughness={0.1}\n              metalness={0.8}\n              depthWrite={false}\n            />\n          </mesh>\n        </Detailed>\n          <mesh visible geometry={nodes['inner-thing'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={BODY_HIGHLIGHT_COLOR}\n              roughness={0.6}\n              metalness={0.5}\n            />\n          </mesh>\n      </group>\n    )})\n  return (\n    <group>\n      {meshObjects}\n    </group>\n  );\n}\n","import React, { useEffect, useRef, createRef } from 'react'\nimport { useLoader, useFrame } from \"react-three-fiber\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\nimport { Vector3} from \"three\"\nimport { Detailed } from \"drei\"\nimport shallow from \"zustand/shallow\"\nimport {\n  PLASTIC_COLOR,\n  TURN_SIGNAL_COLOR,\n  HEADLIGHT_BODY_COLOR,\n  BODY_HIGHLIGHT_COLOR,\n  BODY_DARK_COLOR,\n  EMISSIVE_COLOR_LASER,\n  EMISSIVE_COLOR_STANDARD,\n  EMISSIVE_COLOR_LOW,\n  EMISSIVE_COLOR_OFF\n} from \"../../../constants\"\nimport { useStore } from \"../../../store\"\nimport { getLightState } from \"../../../lib/index\"\n\nexport function ThreeSeriesHeadlights ({ locations }) {\n  const [zoomToMesh, handleHoverMesh, handleUnhoverMesh] = useStore(state => [\n    state.zoomToMesh,\n    state.handleHoverMesh,\n    state.handleUnhoverMesh\n  ], shallow)\n\n  const { nodes } = useLoader(\n    GLTFLoader,\n    process.env.PUBLIC_URL + \"/three-series-high-lod.glb\",\n  );\n\n  const { nodes: lowDetailNodes } = useLoader(\n    GLTFLoader,\n    process.env.PUBLIC_URL + \"/three-series-low-lod.glb\",\n  );\n\n\n  const refs = useRef(locations.map(() => createRef()))\n  const griddyThingRefs = useRef(locations.map(() => createRef()))\n  const topLightRefs = useRef(locations.map(() => createRef()))\n  const bulbRefs = useRef(locations.map(() => createRef()))\n  const envMap = useStore(state => state.envMap)\n\n  useEffect(() => {\n    for (const r of refs.current) {\n      r.current.lookAt(0,0,0)\n      // r.current.rotateX(Math.PI / 2)\n      r.current.rotateY( 5.65 * Math.PI / 4)\n      // r.current.rotateZ(Math.PI / 4)\n    }\n  }, [])\n\n  useFrame(() => {\n    let worldPos = new Vector3()\n    for (let i = 0; i < locations.length; i++) {\n      const headlight = refs.current[i].current;\n      headlight.getWorldPosition(worldPos)\n      const onDarkSide = !!(worldPos.x > 0.1)\n      const { lightLaser, turnLightOn, lightLow } = getLightState(i)\n      const emissiveColor = lightLaser ? EMISSIVE_COLOR_LASER : lightLow ? EMISSIVE_COLOR_LOW : EMISSIVE_COLOR_STANDARD\n      const griddyThing = griddyThingRefs.current[i].current\n      griddyThing.material.emissive = onDarkSide ? emissiveColor : false\n      griddyThing.userData = { bloom: onDarkSide }\n      const topLightLOD = topLightRefs.current[i].current\n      topLightLOD.children[0].material.emissive =  onDarkSide ? emissiveColor : EMISSIVE_COLOR_OFF\n      topLightLOD.children[1].material.emissive =  onDarkSide ? emissiveColor : EMISSIVE_COLOR_OFF\n      topLightLOD.children[0].userData = { bloom: onDarkSide }\n      topLightLOD.children[1].userData = { bloom: onDarkSide }\n      const bulbs = bulbRefs.current[i].current\n      bulbs.material.emissive = turnLightOn ? TURN_SIGNAL_COLOR : onDarkSide ? emissiveColor : EMISSIVE_COLOR_OFF\n      bulbs.userData = { bloom: turnLightOn ? true : onDarkSide }\n    }\n  })\n\n\n  const meshObjects = locations.map(({ position, name, onDarkSide, blinkingOff, turnLightOn }, i) => {\n    return (\n      <mesh scale={[0.018, 0.018, 0.018 ]} key={name} position={position} ref={refs.current[i]}>\n        <mesh\n          visible\n          geometry={lowDetailNodes['visor'].geometry}\n          onClick={zoomToMesh}\n          onPointerOver={handleHoverMesh}\n          onPointerOut={handleUnhoverMesh}\n        >\n          <meshStandardMaterial\n            attach=\"material\"\n            color={0xeeeeee}\n            roughness={0.1}\n            metalness={0.95}\n            opacity={0.7}\n            transparent\n            depthWrite={false}\n            envMap={envMap}\n            envMapIntensity={1.4}\n          />\n        </mesh>\n        <mesh visible ref={bulbRefs.current[i]} geometry={nodes['bulbs'].geometry}>\n          <meshStandardMaterial\n            attach=\"material\"\n            roughness={0.1}\n            metalness={0.8}\n            color={0xaaaaff}\n            transparent\n            opacity={0.6}\n          />\n        </mesh>\n        <Detailed distances={[0, 3.5]}>\n          <mesh visible geometry={nodes['headlight-simpler'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={HEADLIGHT_BODY_COLOR}\n              roughness={0.3}\n              metalness={0.7}\n            />\n          </mesh>\n          <mesh visible geometry={lowDetailNodes['headlight-simpler'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={HEADLIGHT_BODY_COLOR}\n              roughness={0.3}\n              metalness={0.7}\n            />\n          </mesh>\n        </Detailed>\n        <mesh ref={griddyThingRefs.current[i]} visible geometry={nodes['griddy-thing'].geometry}>\n          <meshStandardMaterial\n            attach=\"material\"\n            color={PLASTIC_COLOR}\n            roughness={0.2}\n            metalness={0.8}\n            opacity={0.6}\n            transparent\n            depthWrite={false}\n          />\n        </mesh>\n        <Detailed ref={topLightRefs.current[i]} distances={[0, 2]}>\n          <mesh visible userData={{ bloom: true }} geometry={nodes['top-light'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={0xeeffff}\n              roughness={0.1}\n              metalness={0.8}\n            />\n          </mesh>\n          <mesh visible userData={{ bloom: true }} geometry={lowDetailNodes['top-light'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={0xeeffff}\n              roughness={0.1}\n              metalness={0.8}\n            />\n          </mesh>\n        </Detailed>\n        <Detailed distances={[0, 2]}>\n          <mesh visible geometry={nodes['top-light-2'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={0xddddff}\n              roughness={0.1}\n              metalness={0.8}\n            />\n          </mesh>\n          <mesh visible geometry={lowDetailNodes['top-light-2'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={0xddddff}\n              roughness={0.1}\n              metalness={0.8}\n            />\n          </mesh>\n        </Detailed>\n        <Detailed distances={[0, 3.2]}>\n          <mesh visible geometry={nodes['outer-liner'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={BODY_DARK_COLOR}\n              roughness={0.1}\n              metalness={0.8}\n            />\n          </mesh>\n          <mesh visible geometry={lowDetailNodes['outer-liner'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={BODY_DARK_COLOR}\n              roughness={0.1}\n              metalness={0.8}\n            />\n          </mesh>\n        </Detailed>\n        <Detailed distances={[0, 3.5]}>\n          <mesh visible geometry={nodes['hanger'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={BODY_HIGHLIGHT_COLOR}\n              roughness={0.1}\n              metalness={0.8}\n            />\n          </mesh>\n          <mesh visible geometry={lowDetailNodes['hanger'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={BODY_HIGHLIGHT_COLOR}\n              roughness={0.1}\n              metalness={0.8}\n            />\n          </mesh>\n        </Detailed>\n        <Detailed distances={[0, 1]}>\n          <mesh visible geometry={nodes['inner-body'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              roughness={0.1}\n              metalness={0.8}\n              color={BODY_HIGHLIGHT_COLOR}\n            />\n          </mesh>\n          <mesh visible geometry={lowDetailNodes['inner-body'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={BODY_HIGHLIGHT_COLOR}\n              roughness={0.1}\n              metalness={0.8}\n            />\n          </mesh>\n        </Detailed>\n      </mesh>\n    )})\n  return (\n    <group>\n      {meshObjects}\n    </group>\n  );\n}\n","// adapted from https://github.com/jeromeetienne/threex.volumetricspotlight\nimport * as THREE from \"three\";\n\n/**\n * from http://stemkoski.blogspot.fr/2013/07/shaders-in-threejs-glow-and-halo.html\n * @return {[type]} [description]\n */\nconst VolumetricSpotLightMaterial = function() {\n  //\n  var vertexShader = [\n    \"varying vec3 vNormal;\",\n    \"varying vec3 vWorldPosition;\",\n\n    \"void main(){\",\n    \"// compute intensity\",\n    \"vNormal\t\t= normalize( normalMatrix * normal );\",\n\n    \"vec4 worldPosition\t= modelMatrix * vec4( position, 1.0 );\",\n    \"vWorldPosition\t\t= worldPosition.xyz;\",\n\n    \"// set gl_Position\",\n    \"gl_Position\t= projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n    \"}\"\n  ].join(\"\\n\");\n  var fragmentShader = [\n    \"varying vec3\t\tvNormal;\",\n    \"varying vec3\t\tvWorldPosition;\",\n\n    \"uniform vec3\t\tlightColor;\",\n\n    \"uniform vec3\t\tspotPosition;\",\n\n    \"uniform float\t\tattenuation;\",\n    \"uniform float\t\tanglePower;\",\n\n    \"void main(){\",\n    \"float intensity;\",\n\n    //////////////////////////////////////////////////////////\n    // distance attenuation\t\t\t\t\t//\n    //////////////////////////////////////////////////////////\n    \"intensity\t= distance(vWorldPosition, spotPosition)/attenuation;\",\n    \"intensity\t= 1.0 - clamp(intensity, 0.0, 1.0);\",\n\n    //////////////////////////////////////////////////////////\n    // intensity on angle\t\t\t\t\t//\n    //////////////////////////////////////////////////////////\n    \"vec3 normal\t= vec3(vNormal.x, vNormal.y, abs(vNormal.z));\",\n    \"float angleIntensity\t= pow( dot(normal, vec3(0.0, 0.0, 1.0)), anglePower );\",\n    \"intensity\t= intensity * angleIntensity;\",\n    // 'gl_FragColor\t= vec4( lightColor, intensity );',\n\n    //////////////////////////////////////////////////////////\n    // final color\t\t\t\t\t\t//\n    //////////////////////////////////////////////////////////\n\n    // set the final color\n    \"gl_FragColor\t= vec4( lightColor, intensity);\",\n    \"}\"\n  ].join(\"\\n\");\n\n  // create custom material from the shader code above\n  //   that is within specially labeled script tags\n  var material = new THREE.ShaderMaterial({\n    uniforms: {\n      attenuation: {\n        type: \"f\",\n        value: 5.0\n      },\n      anglePower: {\n        type: \"f\",\n        value: 1.2\n      },\n      spotPosition: {\n        type: \"v3\",\n        value: new THREE.Vector3(0, 0, 0)\n      },\n      lightColor: {\n        type: \"c\",\n        value: new THREE.Color(\"cyan\")\n      }\n    },\n    vertexShader: vertexShader,\n    fragmentShader: fragmentShader,\n    side\t\t: THREE.DoubleSide,\n    transparent: true,\n    depthWrite: false\n  });\n  return material;\n};\n\nexport default VolumetricSpotLightMaterial;\n","import React, { useEffect, useState } from \"react\";\n\n// from https://github.com/jeromeetienne/threex.volumetricspotlight\nimport { useThree, useFrame, extend } from \"react-three-fiber\";\nimport VolumetricSpotlight from \"../../../lib/volumetric-spotlight\";\nimport { BEAM_COLOR_LASER, BEAM_COLOR_STANDARD } from \"../../../constants\"\nimport * as THREE from \"three\";\nimport { getLightState } from \"../../../lib\"\n\nextend({\n  VolumetricSpotlight\n});\n\nexport const MyVolumetricSpotlight = React.forwardRef(function MyVolumetricSpotlight(props, ref) {\n  const vs = React.useRef();\n\n  const { scene } = useThree();\n\n  const {\n    length,\n    position,\n    target,\n    index,\n    angle = 1.2,\n    geometryLength = 8,\n    openEnded,\n    wide\n  } = props;\n  const { clock } = useThree()\n\n  const [startTime] = useState(clock.elapsedTime)\n  // INIT\n  useEffect(() => {\n    // scene.add(spotlight.current.target);\n\n    const geometry = vs.current.geometry;\n\n    geometry.applyMatrix4(\n      new THREE.Matrix4().makeTranslation(0, -geometry.parameters.height / 2, 0)\n    );\n    geometry.applyMatrix4(new THREE.Matrix4().makeRotationX(-Math.PI / 2));\n\n    // vs.current.material.uniforms.spotPosition.value = vs.current.position;\n\n    // spotlight.current.position.copy(vs.current.position);\n    // spotlight.current.position.copy(vs.current.position);\n    // // @todo fix this\n    // vs.current.material.uniforms.lightColor.value = spotlight.current.color;\n\n\n    // if (target && target.current) {\n    //   const targetPos = new THREE.Vector3();\n    //   target.current.getWorldPosition(targetPos) ;\n    //   vs.current.lookAt(targetPos);\n    //   spotlight.current.target.position.copy(targetPos);\n    // }\n  }, [scene]);\n\n  useFrame(({ clock }) => {\n    // spotlight.current.position.copy(vs.current.position);\n    // @todo fix this\n    // vs.current.material.uniforms.lightColor.value = spotlight.current.color;\n\n\n    if (target && target.current) {\n      const targetPos = new THREE.Vector3()\n      target.current.getWorldPosition(targetPos)\n      vs.current.lookAt(targetPos)\n      vs.current.rotateZ(Math.PI / 12)\n      vs.current.rotateY(Math.PI / 12)\n      const onDarkSide = !!(targetPos.x > 0.1)\n      const { lightLaser, lightHigh } = getLightState(index)\n      vs.current.visible = onDarkSide && clock.elapsedTime - startTime > 2\n      if (!onDarkSide) return\n      vs.current.material.uniforms.lightColor.value = lightLaser ? BEAM_COLOR_LASER : BEAM_COLOR_STANDARD\n      if (wide) {\n        vs.current.material.uniforms.anglePower.value = lightLaser ? 1.4 : 1.2\n        vs.current.scale.set(lightLaser ? 2 : 3.5, 1, 1)\n        vs.current.material.uniforms.attenuation.value = 3.9\n      } else {\n        let lightLength = 4\n        if (lightLaser) lightLength = 6\n        if (lightHigh) lightLength = 5\n        vs.current.material.uniforms.attenuation.value = lightLength\n        vs.current.material.uniforms.anglePower.value = lightLaser ? 1.3 : 1.2\n        vs.current.scale.set(lightLaser ? 1.5 : 3, 1, 1)\n      }\n    }\n  });\n\n  const setRef = React.useCallback(function setRef(el) {\n    vs.current = el;\n\n    if (ref) {\n      ref.current = el;\n    }\n  }, [ref]);\n\n  // // maps spotlight angle to volueme cylinder every frame\n  // // it would be better to do it on a need-to basis\n  // // but it doesn't play nice with react-spring\n  // useFrame(() => {\n  //   // const angle = spotlight.current.angle;\n\n  // });\n\n  return (\n    <>\n      {/* <spotLight */}\n      {/*   ref={spotlight} */}\n      {/*   intensity={initialized ? intensity : 0} */}\n      {/*   angle={angle} */}\n      {/*   penumbra={penumbra} */}\n      {/*   distance={distance} */}\n      {/*   color={color} */}\n      {/* /> */}\n      <mesh visible={false} ref={setRef} position={position}>\n        <cylinderGeometry args={[0.05, 0.25, geometryLength, 12, 1, openEnded]} attach=\"geometry\" />\n        <volumetricSpotlight\n          attach=\"material\"\n          uniforms-attenuation-value={length} // as porportion to height of cylinder\n          uniforms-anglePower-value={angle}\n        />\n      </mesh>\n    </>\n  );\n});\n","import React, { useRef, createRef } from \"react\";\n\nimport { MyVolumetricSpotlight } from \"./VolumetricSpotlight\";\n\n\nexport function HeadlightBeams ({ locations }) {\n  const targetRefs = useRef(locations.map(() => createRef()))\n  const bloomRefs = useRef(locations.map(() => createRef()))\n\n  const beams = locations.map(({\n    position,\n    render\n  }, i ) => {\n    const posScaleFactor = render ? 0.98 : 0.995\n    return (\n      <group key={i}>\n        <mesh\n          ref={targetRefs.current[i]}\n          position={[position[0] * 10, position[1] * 10, position[2] * 10]}\n        />\n        <mesh\n          ref={bloomRefs.current[i]}\n          position={[position[0] * 2, position[1] * 2, position[2] * 2]}\n        />\n        <MyVolumetricSpotlight\n          position={[position[0] * posScaleFactor, position[1] * posScaleFactor, position[2] * posScaleFactor]}\n          index={i}\n          target={targetRefs.current[i]}\n          openEnded\n        />\n        {render && (\n          <MyVolumetricSpotlight\n            position={[position[0] * 1.02, position[1] * 1.02, position[2] * 1.02]}\n            length={3.9}\n            wide\n            index={i}\n            geometryLength={1}\n            target={bloomRefs.current[i]}\n            openEnded\n          />\n        )}\n      </group>\n    )\n  })\n\n  return (\n    <>\n      {beams}\n    </>\n  );\n};\n","import React, { useRef, useEffect } from 'react'\nimport * as THREE from 'three'\nimport { useLoader, useFrame } from \"react-three-fiber\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\nimport { draco } from \"drei\";\nimport { calculateAngleForTime } from \"../../../lib\"\n\nconst dummy = new THREE.Object3D();\n\nfunction initInstancedMesh(instanced, locations, lightGuide) {\n  const r = calculateAngleForTime()\n  locations.forEach((location, i) => {\n    const { position } = location\n    dummy.position.set(...position)\n    const pos = new THREE.Vector3(...position)\n    const worldPos = pos.applyMatrix4(new THREE.Matrix4().makeRotationY(r))\n    let scale = [0.015, 0.015, 0.015]\n    const onDarkSide = !!(worldPos.x > 0.1)\n    if (lightGuide === 'on' && !onDarkSide) {\n      scale = [0, 0, 0]\n    }\n    if (lightGuide === 'off' && onDarkSide) {\n      scale = [0, 0, 0]\n    }\n    dummy.scale.set(...scale)\n    dummy.lookAt(0, 0, 0)\n    dummy.rotateY( 5.6 * Math.PI / 4)\n    dummy.updateMatrix()\n    instanced.current.setMatrixAt(i, dummy.matrix)\n  })\n  instanced.current.instanceMatrix.needsUpdate = true\n}\n\nexport function FillerLights ({ locations }) {\n  const { nodes } = useLoader(\n    GLTFLoader,\n    process.env.PUBLIC_URL + \"/laser.glb\",\n    draco(process.env.PUBLIC_URL + \"/draco-gltf/\")\n  )\n\n  const instancedMeshVisor = useRef()\n  const instancedMeshLightGuideOn = useRef()\n  const instancedMeshLightGuideOff = useRef()\n  const instancedMeshLens = useRef()\n\n  useEffect(() => {\n    initInstancedMesh(instancedMeshVisor, locations);\n    initInstancedMesh(instancedMeshLens, locations);\n  }, [locations])\n\n  useFrame(({ clock }) => {\n    initInstancedMesh(instancedMeshLightGuideOn, locations, 'on');\n    initInstancedMesh(instancedMeshLightGuideOff, locations, 'off');\n  }, 2)\n\n\n  return (\n    <group>\n      <instancedMesh ref={instancedMeshVisor} userData={{ bloom: true }} geometry={nodes['visor'].geometry} args={[null, null, locations.length]} >\n        <meshStandardMaterial\n          attach=\"material\"\n          color={0xccccff}\n          roughness={0.05}\n          metalness={0.9}\n          opacity={0.7}\n          transparent\n          depthWrite={false}\n        />\n      </instancedMesh>\n      <instancedMesh ref={instancedMeshLightGuideOff} geometry={nodes['light-guide'].geometry} args={[null, null, locations.length]} >\n        <meshStandardMaterial\n          attach=\"material\"\n          color={0xddeeff}\n          roughness={0.2}\n          metalness={0.8}\n          opacity={0.4}\n          transparent\n          depthWrite={false}\n        />\n      </instancedMesh>\n      <instancedMesh ref={instancedMeshLightGuideOn} userData={{ bloom: true }} geometry={nodes['light-guide'].geometry} args={[null, null, locations.length]} >\n        <meshStandardMaterial\n          attach=\"material\"\n          color={0xddeeff}\n          roughness={0.2}\n          metalness={0.8}\n          emissive={0xaaaaff}\n          opacity={0.4}\n          depthWrite={false}\n          transparent\n        />\n      </instancedMesh>\n      <instancedMesh ref={instancedMeshLens} geometry={nodes['lens'].geometry} args={[null, null, locations.length]} >\n        <meshStandardMaterial\n          attach=\"material\"\n          roughness={0.3}\n          metalness={0.5}\n          color={0xaaaaff}\n          depthWrite={false}\n          opacity={0.4}\n          transparent\n        />\n      </instancedMesh>\n    </group>\n  )\n}\n","import React, { useEffect, useRef, useState } from \"react\";\nimport { useFrame } from \"react-three-fiber\";\nimport { Html, useTextureLoader } from \"drei\";\nimport { WebGLCubeRenderTarget, Texture } from \"three\";\nimport {\n  calculateAngleForTime,\n} from \"../lib\"\nimport { useStore } from \"../store\"\n\nconst hkSrc = 'https://tdcctv.data.one.gov.hk/K121F.JPG?';\nconst nycSrc = 'http://207.251.86.238/cctv884.jpg?';\nconst corsProxy = 'https://cors-anywhere.services.computerlab.io';\n\nexport function WebcamImageManager ({ locations }) {\n  const edgeBlur = useTextureLoader(process.env.PUBLIC_URL + '/edge-blur.png')\n  const nycImgRef = useRef()\n  const hkImgRef = useRef()\n  const [renderTarget] = useState(new WebGLCubeRenderTarget(1024, { generateMipmaps: true }))\n  const cubeCamera = useRef()\n  const nycWebcamRef = useRef()\n  const hkWebcamRef = useRef()\n  const nycLocation = locations.find(l => l.name === 'New York City')\n  const hkLocation = locations.find(l => l.name === 'Shenzhen')\n  const setEnvMap = useStore(state => state.setEnvMap)\n\n  useFrame(({ gl, scene, camera }) => {\n    const newNycSrc = `${corsProxy}/${nycSrc}&rand=${Math.floor(new Date().getTime() / 1000)}`\n    const newHkSrc = `${corsProxy}/${hkSrc}&rand=${Math.floor(new Date().getTime() / 10000)}`\n    if (newHkSrc !== hkImgRef.current.src) {\n      hkImgRef.current.src = newHkSrc\n    }\n    if (newNycSrc !== nycImgRef.current.src) {\n      cubeCamera.current.update(gl, scene)\n      nycImgRef.current.src = newNycSrc\n      cubeCamera.current.rotation.y = - calculateAngleForTime()\n      setEnvMap(renderTarget.texture)\n    }\n  })\n\n  useEffect(() => {\n    nycWebcamRef.current.lookAt(0, 0, 0)\n    hkWebcamRef.current.lookAt(0, 0, 0)\n    nycImgRef.current.onload = () => {\n      const tex = new Texture(nycImgRef.current)\n      tex.needsUpdate = true\n      nycWebcamRef.current.material.map = tex\n      nycWebcamRef.current.material.needsUpdate = true\n    }\n    hkImgRef.current.onload = () => {\n      const tex = new Texture(hkImgRef.current)\n      tex.needsUpdate = true\n      hkWebcamRef.current.material.map = tex\n      hkWebcamRef.current.material.needsUpdate = true\n    }\n  }, [])\n\n\n  return (\n    <>\n      <cubeCamera\n        layers={[11]}\n        name=\"cubeCamera\"\n        ref={cubeCamera}\n        position={[0, 0, 0]}\n        // i. notice how the renderTarget is passed as a constructor argument of the cubeCamera object\n        args={[0.1, 25, renderTarget]}\n      />\n      <mesh\n        layers={[11]}\n        ref={nycWebcamRef}\n        position={[nycLocation.position[0] * 1.1, nycLocation.position[1] * 1.1, nycLocation.position[2] * 1.1]}\n      >\n         <planeGeometry args={[13, 8]} />\n         <meshBasicMaterial alphaMap={edgeBlur} transparent color={0xbbbbbb} />\n      </mesh>\n      <mesh\n        layers={[11]}\n        ref={hkWebcamRef}\n        userData={{ hidden: true }}\n        position={[hkLocation.position[0] * 1.1, hkLocation.position[1] * 1.1, hkLocation.position[2] * 1.1]}\n      >\n         <planeGeometry args={[10, 8]} />\n         <meshBasicMaterial alphaMap={edgeBlur} transparent color={0xbbbbbb} />\n      </mesh>\n      <Html>\n        <img alt='nyc traffic cam' style={{ display: 'none' }} crossOrigin=\"anonymous\" ref={nycImgRef} src={`${corsProxy}/${nycSrc}`} />\n        <img alt='nyc traffic cam' style={{ display: 'none' }} crossOrigin=\"anonymous\" ref={hkImgRef} src={`${corsProxy}/${hkSrc}`} />\n      </Html>\n    </>\n  )\n}\n","import React from \"react\"\nimport { useTextureLoader } from \"drei\"\nimport { Vector2, RepeatWrapping } from \"three\"\n\nconst WIDTH_SEGMENTS = 25\nconst HEIGHT_SEGMENTS = 25\n\nexport function Oceans ({ radius }) {\n  const topo = useTextureLoader(process.env.PUBLIC_URL + '/topo.png')\n  const ocean = useTextureLoader(process.env.PUBLIC_URL + '/ocean-texture.png')\n  const specular = useTextureLoader(process.env.PUBLIC_URL + '/specular.png')\n  topo.offset = new Vector2(0.5, 0)\n  topo.wrapS = RepeatWrapping\n  ocean.offset = new Vector2(0.5, 0)\n  ocean.wrapS = RepeatWrapping\n  specular.offset = new Vector2(0.5, 0)\n  specular.wrapS = RepeatWrapping\n  return (\n    <mesh>\n      <sphereBufferGeometry args={[radius - 0.1, WIDTH_SEGMENTS, HEIGHT_SEGMENTS]} />\n      <meshPhongMaterial\n        color={0xeeeeff}\n        alphaMap={topo}\n        map={ocean}\n        specularMap={specular}\n        transparent\n        depthWrite={false}\n      />\n    </mesh>\n  )\n}\n","import React, { useRef, useMemo } from \"react\"\nimport { useFrame } from \"react-three-fiber\"\n\nimport {\n  sphericalCoordsToCartesian,\n  latlngToSphericalCoords,\n  calculateAngleForTime,\n} from \"../../lib\"\nimport { EightSeriesHeadlights } from \"./Headlights/EightSeriesHeadlights\"\nimport { ThreeSeriesHeadlights } from \"./Headlights/ThreeSeriesHeadlights\"\nimport { HeadlightBeams } from \"./Headlights/HeadlightBeams\"\nimport { FillerLights } from \"./Headlights/FillerLights\"\nimport { WebcamImageManager } from \"../WebcamImageManager\"\nimport { Oceans } from \"./Oceans\"\nimport { RADIUS } from \"../../constants\"\n\nconst PRECISION = 7\n\nexport function LightGlobe ({ cities }) {\n  const group = useRef()\n\n  useFrame(() => {\n    const r = calculateAngleForTime()\n    group.current.rotation.y = r\n  })\n\n  const locations = useMemo(() =>\n    cities\n      .reduce((acc, cur) => {\n          const localMaxCity = acc.reduce((a, c) => (\n            (Math.abs(a.lat - c.lat) < PRECISION && Math.abs(a.lng - c.lng) < PRECISION) && c.population > a.population\n            ? c\n            : a\n          ), cur)\n          if (localMaxCity && !acc.find(c => c === localMaxCity)) return acc.concat(localMaxCity)\n          return acc\n        }, [])\n      .map(({ lat, lng, name, render }, i) => {\n        const [inc, azm ] = latlngToSphericalCoords(lat, lng)\n        const position = sphericalCoordsToCartesian(render ? RADIUS : RADIUS - 0.03, inc, azm);\n        return {\n          render,\n          position,\n          name,\n        }\n      }),\n    [cities]\n  )\n\n  return (\n    <group ref={group}>\n      <EightSeriesHeadlights locations={locations.filter(({ render }) => render === 'EightSeries')} />\n      <ThreeSeriesHeadlights locations={locations.filter(({ render }) => render === 'ThreeSeries')} />\n      <FillerLights locations={locations.filter(({ render }) => !render)} />\n      <HeadlightBeams locations={locations} />\n      <WebcamImageManager locations={locations} />\n      <Oceans radius={RADIUS} />\n    </group>\n  );\n};\n","import React from \"react\"\nimport { Html, useProgress } from \"drei\"\nimport { IS_LIVE } from \"../constants\"\n\nexport function LoadingIndicator () {\n  const { progress, errors } = useProgress()\n  if (errors.length) console.log(errors)\n  let loadingText = `Loading ${Math.round(progress)}%`\n  if (!IS_LIVE) loadingText = 'Coming October 7th'\n  if (errors.length) loadingText = 'Error'\n  return (\n    <Html center>\n      <div className='loading'>\n        <svg xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 500 500\">\n          <title>TOMORROW WILL BE NOTHING LIKE TODAY WILL BE NOTHING LIKE</title>\n          <defs>\n            <path d=\"M50,250c0-110.5,89.5-200,200-200s200,89.5,200,200s-89.5,200-200,200S50,360.5,50,250\" id=\"textcircle\">\n              <animateTransform\n                attributeName=\"transform\"\n                begin=\"0s\"\n                dur=\"30s\"\n                type=\"rotate\"\n                from=\"0 250 250\"\n                to=\"360 250 250\"\n                repeatCount=\"indefinite\"\n              />\n              </path>\n            </defs>\n            <text className=\"progress\" x=\"50%\" y=\"50%\" dominantBaseline=\"middle\" textAnchor=\"middle\">\n              { loadingText }\n            </text>\n            <text dy=\"70\" textLength=\"1220\">\n              <textPath className=\"circle-text\" xlinkHref=\"#textcircle\">TOMORROW WILL BE NOTHING LIKE TODAY WILL BE NOTHING LIKE</textPath>\n            </text>\n          </svg>\n        </div>\n      </Html>\n  )\n\n}\n","import { useEffect, useMemo } from 'react'\nimport * as THREE from 'three'\nimport { extend, useFrame, useThree } from 'react-three-fiber'\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer'\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass'\nimport { UnrealBloomPass } from 'three/examples/jsm/postprocessing/UnrealBloomPass'\nimport { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass'\n\nextend({ EffectComposer, RenderPass, UnrealBloomPass })\n\nconst materials = {}\nconst darkMaterial = new THREE.MeshBasicMaterial({ color: 'black' })\nconst transparentDarkMaterial = new THREE.MeshBasicMaterial({ color: 'black', depthWrite: false })\nconst darkenNonBloomed = obj => {\n  if (obj.isMesh && !obj.userData.bloom) {\n    materials[obj.uuid] = obj.material\n    obj.material = obj.material.depthWrite ? darkMaterial : transparentDarkMaterial\n  }\n}\nconst restoreMaterial = obj => materials[obj.uuid] && ((obj.material = materials[obj.uuid]), delete materials[obj.uuid])\n\nexport function Effects() {\n  const { gl, scene, camera, size } = useThree()\n  // const bloomStrength = useControl('Bloom Strength', { type: 'number', value: 2.3 })\n  // const bloomThreshold = useControl('Bloom Threshold', { type: 'number', value: 0.2 })\n  const bloomStrength = 1.8\n  const bloomThreshold = 0.23\n\n  const [bloom, final] = useMemo(() => {\n    const renderScene = new RenderPass(scene, camera)\n    const comp = new EffectComposer(gl)\n    comp.renderToScreen = false\n    comp.addPass(renderScene)\n    comp.addPass(new UnrealBloomPass(new THREE.Vector2(size.width / 2, size.height / 2), bloomStrength, 0, bloomThreshold))\n\n    const finalComposer = new EffectComposer(gl)\n    finalComposer.addPass(renderScene)\n    const finalPass = new ShaderPass(\n      new THREE.ShaderMaterial({\n        uniforms: { baseTexture: { value: null }, bloomTexture: { value: comp.renderTarget2.texture } },\n        vertexShader:\n          'varying vec2 vUv; void main() { vUv = uv; gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 ); }',\n        fragmentShader:\n          'uniform sampler2D baseTexture; uniform sampler2D bloomTexture; varying vec2 vUv; void main() { gl_FragColor = ( texture2D(baseTexture, vUv) + vec4( 1.0 ) * texture2D( bloomTexture, vUv ) ); }'\n      }),\n      'baseTexture'\n    )\n    finalPass.needsSwap = true\n    finalComposer.addPass(finalPass)\n    return [comp, finalComposer]\n  }, [camera, gl, scene, size.height, size.width, bloomStrength, bloomThreshold])\n\n  useEffect(() => {\n    bloom.setSize(size.width, size.height)\n    final.setSize(size.width, size.height)\n  }, [bloom, final, size])\n\n  useFrame(({ scene, camera }) => {\n    // https://github.com/mrdoob/three.js/blob/master/examples/webgl_postprocessing_unreal_bloom_selective.html\n    // this seems kinda dirty, it mutates the scene and overwrites materials\n    // camera.layers.enable(11)\n    scene.traverse(darkenNonBloomed)\n    bloom.render()\n    scene.traverse(restoreMaterial)\n    // then writes the normal scene on top\n    final.render()\n  }, 1)\n\n  return null\n}\n\n","import React, { useRef } from \"react\"\nimport { useFrame } from \"react-three-fiber\"\nimport { Vector3 } from \"three\"\nimport shallow from \"zustand/shallow\"\nimport { OrbitControls } from \"drei\"\n\nimport { useStore } from \"../store\"\nimport { RADIUS, ZOOM_DURATION } from \"../constants\"\n\nexport function CameraRig () {\n  const [zoomTarget, zoomStartTime, zoomStartPosition] = useStore(state =>\n    [state.zoomTarget, state.zoomStartTime, state.zoomStartPosition], shallow)\n  const setZoomStartTime = useStore(state => state.setZoomStartTime)\n  const setZoomStartPosition = useStore(state => state.setZoomStartPosition)\n  const setZoomTarget = useStore(state => state.setZoomTarget)\n  const orbitControlsRef = useRef()\n\n  useFrame(({ camera, clock }) => {\n    const cameraDistance = camera.position.length()\n    if (cameraDistance < 3.5) {\n      orbitControlsRef.current.zoomSpeed = 0.1\n      orbitControlsRef.current.rotateSpeed = 0.3\n    } else if (cameraDistance < 5.5) {\n      orbitControlsRef.current.zoomSpeed = 0.2\n      orbitControlsRef.current.rotateSpeed = 0.8\n    } else {\n      orbitControlsRef.current.zoomSpeed = 0.3\n      orbitControlsRef.current.rotateSpeed = 1\n    }\n    if (zoomTarget) {\n      if (!zoomStartTime) {\n        setZoomStartTime(clock.elapsedTime)\n        setZoomStartPosition(new Vector3().copy(camera.position)) // copy, otherwise reference is stored!\n        return\n      }\n      let zoomDurationScaledByDistance = ZOOM_DURATION\n      const distanceToZoom = zoomStartPosition.distanceTo(zoomTarget)\n      if (distanceToZoom < 0.5) zoomDurationScaledByDistance = ZOOM_DURATION / 6\n      if (distanceToZoom < 1) zoomDurationScaledByDistance = ZOOM_DURATION / 2\n      if (distanceToZoom > 3) zoomDurationScaledByDistance = ZOOM_DURATION * 1.5\n      if (!zoomDurationScaledByDistance || clock.elapsedTime > zoomStartTime + zoomDurationScaledByDistance) {\n        setZoomTarget(null)\n        setZoomStartTime(null)\n        setZoomStartPosition(null)\n        return\n      }\n      const a = (clock.elapsedTime - zoomStartTime) / zoomDurationScaledByDistance\n      const newCamPos = new Vector3().lerpVectors(zoomStartPosition, zoomTarget, a)\n      camera.position.copy(newCamPos)\n      camera.updateProjectionMatrix()\n    }\n  })\n\n\n  return (\n    <OrbitControls ref={orbitControlsRef} enableDamping minDistance={RADIUS + 0.2} maxDistance={20} enablePan={false} zoomSpeed={0.2} />\n  )\n}\n","import React, { forwardRef, useMemo, useRef } from 'react'\nimport { useFrame } from 'react-three-fiber'\nimport { Vector3, Spherical, Color, AdditiveBlending, ShaderMaterial } from 'three'\n\nclass StarfieldMaterial extends ShaderMaterial {\n  constructor() {\n    super({\n      uniforms: { time: { value: 0.0 }, fade: { value: 1.0 } },\n      depthWrite: false,\n      vertexShader: `uniform float time;\n      attribute float size;\n      varying vec3 vColor;\n      void main() {\n        vColor = color;\n        vec4 mvPosition = modelViewMatrix * vec4(position, 0.5);\n        gl_PointSize = size * (30.0 / -mvPosition.z) * (3.0 + sin(mvPosition.x + 2.0 * time + 100.0));\n        gl_Position = projectionMatrix * mvPosition;\n      }`,\n      fragmentShader: `uniform sampler2D pointTexture;\n      uniform float fade;\n      varying vec3 vColor;\n      void main() {\n        float opacity = 1.0;\n        if (fade == 1.0) {\n          float d = distance(gl_PointCoord, vec2(0.5, 0.5));\n          opacity = 1.0 / (1.0 + exp(16.0 * (d - 0.25)));\n        }\n        gl_FragColor = vec4(vColor, opacity);\n      }`,\n    })\n  }\n}\n\n\nconst genStar = (r) => {\n  return new Vector3().setFromSpherical(new Spherical(r, Math.acos(1 - Math.random() * 2), Math.random() * 2 * Math.PI)) }\n\nexport const Stars = forwardRef(\n  ({ radius = 100, depth = 50, count = 5000, saturation = 0, factor = 4, fade = false }, ref) => {\n    const material = useRef()\n    const [position, color, size] = useMemo(() => {\n      const positions = []\n      const colors = []\n      const sizes = Array.from({ length: count }, () => (0.5 + 0.5 * Math.random()) * factor)\n      const color = new Color()\n      let r = radius + depth\n      const increment = depth / count\n      for (let i = 0; i < count; i++) {\n        r -= increment * Math.random()\n        positions.push(...genStar(r).toArray())\n        color.setHSL(i / count, saturation, 1)\n        colors.push(color.r, color.g, color.b)\n      }\n      return [new Float32Array(positions), new Float32Array(colors), new Float32Array(sizes)]\n    }, [count, depth, factor, radius, saturation])\n    useFrame((state) => material.current && (material.current.uniforms.time.value = state.clock.getElapsedTime()))\n\n    const starfieldMaterial = useMemo(() => new StarfieldMaterial(), [])\n\n    return (\n      <points ref={ref}>\n        <bufferGeometry attach=\"geometry\">\n          <bufferAttribute attachObject={['attributes', 'position']} args={[position, 3]} />\n          <bufferAttribute attachObject={['attributes', 'color']} args={[color, 3]} />\n          <bufferAttribute attachObject={['attributes', 'size']} args={[size, 1]} />\n        </bufferGeometry>\n        <primitive\n          ref={material}\n          object={starfieldMaterial}\n          attach=\"material\"\n          blending={AdditiveBlending}\n          uniforms-fade-value={fade}\n          transparent\n          vertexColors\n        />\n      </points>\n    )\n  }\n)\n","import \"./styles.css\"\n\nimport React, { Suspense } from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { ControlsProvider } from 'react-three-gui'\nimport Credits from \"./components/Credits\"\nimport { Canvas } from \"react-three-fiber\"\nimport { CineonToneMapping } from \"three\"\nimport cities from \"./lib/cities.json\"\nimport Lights from \"./components/Lights\"\nimport { LightGlobe } from \"./components/LightGlobe/LightGlobe\"\nimport { Stats } from \"drei\"\nimport { LoadingIndicator } from \"./components/LoadingIndicator\"\nimport { BG_COLOR, IS_LIVE } from \"./constants\"\nimport { Effects } from \"./components/Effects\"\nimport { CameraRig } from \"./components/CameraRig\"\nimport { Stars } from \"./components/Stars\"\n\nfunction App() {\n  return (\n    <>\n      <Credits/>\n      <ControlsProvider>\n        <Canvas\n          colorManagement\n          concurrent\n          onCreated={({ gl }) => gl.setClearColor(BG_COLOR)}\n          gl={{ antialias: true, toneMapping: CineonToneMapping }}\n        >\n          <fogExp2 attach=\"fog\" args={[\"#020202\", 0.1]} />\n          <Lights />\n          {\n            IS_LIVE\n              ? (\n                <Suspense fallback={<LoadingIndicator />}>\n                  <LightGlobe cities={cities} />\n                </Suspense>\n              )\n              : <LoadingIndicator />\n          }\n          <CameraRig />\n          <Stars factor={2.5} saturation={0.3} fade />\n          <Stats />\n          <Effects />\n        </Canvas>\n      </ControlsProvider>\n    </>\n  );\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n\n"],"sourceRoot":""}